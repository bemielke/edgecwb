/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */


package gov.usgs.anss.util;
//import java.beans.javax_swing_Box_PersistenceDelegate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Properties;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.UC;
import gov.usgs.anss.util.Util;

/**
 * UserPropertiesPanel.java - Implements a GUI for updating a set of
 * user Properties.  Each major program Inv.jar, Anss.jar keeps a set of user
 *properties in a file in the users area.  This GUI reads all of the properties
 *and creates labels and JTextFields so the user can change the settings of
 *and of the properties and then save the result.
 * @author  D.C. Ketchum
 */
public class UserPropertiesPanel extends javax.swing.JPanel
{
  private javax.swing.JTextField jTextField1;
  private javax.swing.JLabel jLabel1;
  ArrayList<javax.swing.JLabel> names;        // list of propery Keys stored in JLabels */
  ArrayList<javax.swing.JTextField> values;        // list of JTextFields with the property values
  javax.swing.JTextField [] tf;
  Properties prop;
  ArrayList<String> ens;
  /** Creates new form UserPropertiesPanel */
  public UserPropertiesPanel()
  { initComponents();
    java.awt.GridBagConstraints gridBagConstraints;
    prop = Util.getProperties();
    ens = new ArrayList<String>(20);
    //if(USGSPropertyFixer.checkProperties()) Util.saveProperties();
    Enumeration en = prop.propertyNames();
    while(en.hasMoreElements()) {
      String label = (String) en.nextElement();
      if(label.equalsIgnoreCase("configX") || label.equalsIgnoreCase("configY") ||
              label.equalsIgnoreCase("HostIP") ||label.equalsIgnoreCase("daysize") ||
              label.substring(0,Math.min(label.length(), 4)).equalsIgnoreCase("nday") || 
              label.substring(0,Math.min(label.length(), 9)).equalsIgnoreCase("ndatapath") ||
              label.equalsIgnoreCase("logfilepath") ) continue;
      ens.add(label);
    }
    Collections.sort(ens);
     
    names = new ArrayList<javax.swing.JLabel>(10);
    values = new ArrayList<javax.swing.JTextField>(10);
    //int i=0;
    int nrows = ens.size()/2 + ens.size() % 2;
    for(int i=0; i<ens.size(); i++)  {
      //String label = (String) en.nextElement();
      String label = ens.get(i);
      javax.swing.JLabel l = new javax.swing.JLabel();
      l.setFont(new java.awt.Font("Monospaced", 0, 12));
      javax.swing.JTextField t = new javax.swing.JTextField();
      t.setFont(new java.awt.Font("Monospaced", 0, 12));
      t.setColumns(30);
      l.setText(label);
      t.setText( prop.getProperty(l.getText()));
      //Util.prt(l.getText()+" = "+ t.getText());

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = i/nrows*2;  // was 0
      gridBagConstraints.gridy = i%nrows+1; // was i+1
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      add(l, gridBagConstraints);
    

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = i/nrows*2 + 1; // was one
      gridBagConstraints.gridy = i%nrows+1;     // was i+1
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      add(t, gridBagConstraints);
      names.add(l);
      values.add(t);
      //i++;
    }
    updateButton.setText("Update");
   

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */

  private void initComponents() {//GEN-BEGIN:initComponents
    UC.Look(this);
    java.awt.GridBagConstraints gridBagConstraints;

    updateButton = new javax.swing.JButton();

    setLayout(new java.awt.GridBagLayout());
 
    updateButton.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateButtonActionPerformed(evt);
      }
    });    

    setLayout(new java.awt.GridBagLayout());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    add(updateButton, gridBagConstraints);

  }//GEN-END:initComponents
 
  public void updateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_updateButtonActionPerformed
  {//GEN-HEADEREND:event_updateButtonActionPerformed
    // Add your handling code here:
    for(int i=0; i<names.size(); i++) {
      Util.prt(((javax.swing.JLabel) names.get(i)).getText()+"="+
                    ((javax.swing.JTextField) values.get(i)).getText());
     Util.setProperty(((javax.swing.JLabel) names.get(i)).getText(), 
                    ((javax.swing.JTextField) values.get(i)).getText());
    }
    Util.saveProperties();
  }//GEN-LAST:event_updateButtonActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton updateButton;
  // End of variables declaration//GEN-END:variables
  /**
   * Test for the Pane alone
   *@param args The usual command line args is ignored.
   */
  
  public static void main(String args[]) {
    Util.init();
    Util.loadProperties("anss.prop");
      Show.inFrame(new UserPropertiesPanel(), 
        UC.XSIZE, UC.YSIZE-50);
    
  }  
}
