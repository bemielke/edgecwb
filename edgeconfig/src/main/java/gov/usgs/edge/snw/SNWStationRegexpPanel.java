/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */

 /*
 * MultiChannelPanel.java
 *
 * Created on July 11, 2006, 11:42 AM
 */
package gov.usgs.edge.snw;

import gov.usgs.edge.config.Protocol;
import gov.usgs.edge.config.Operator;
import gov.usgs.edge.config.UC;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.util.ErrorTrack;
import gov.usgs.anss.util.FUtil;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.Util;
import gov.usgs.edge.config.FlagOnOffPanel;
import gov.usgs.edge.config.AllFlagsPanel;
import gov.usgs.edge.config.OperatorPanel;
import gov.usgs.edge.config.ProtocolPanel;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.ResultSet;
import java.sql.Connection;
import java.util.ArrayList;

/**
 *
 * @author davidketchum
 */
public class SNWStationRegexpPanel extends javax.swing.JPanel {

  private final FlagOnOffPanel groupPanel;
  private Statement stmt;
  private Statement stmtout;
  private final ErrorTrack err;

  private Timestamp disDate;
  private int ruleID;
  private int operatorID;
  private int protocolID;
  private int nstat;
  private int latencySaveInt;
  // This routine must validate all fields on the form.  The err (ErrorTrack) variable
  // is used by the FUtil to verify fields.  Use FUTil or custom code here for verifications

  private boolean chkForm() {
    // Do not change
    err.reset();
    UC.Look(error);

    //USER:  Your error checking code goes here setting the local variables to valid settings
    // note : Use FUtil.chk* to check dates, timestamps, IP addresses, etc and put them in
    // canonical form.  store in a class variable.  For instance :
    //   sdate = FUtil.chkDate(dateTextField, err);
    // Any errors found should err.set(true);  and err.append("error message");
    Util.prt("chkForm stations ");
    disDate = FUtil.chkTimestamp(disableDate, err);
    // No CHANGES : If we found an error, color up error box
    if (err.isSet()) {
      error.setText(err.getText());
      error.setBackground(gov.usgs.anss.util.UC.red);
    }
    latencySaveInt = FUtil.chkInt(latencySave, err, 0, 7200, true);
    return err.isSet();

  }

  /**
   * set initial state of screen.
   */
  private void clearScreen() {
    disableComment.setText("");
    disableDate.setText("");
    helpString.setText("");
    latencySave.setText("");
    disable.setSelected(false);
    snwRule.setSelectedIndex(-1);
    operator.setSelectedIndex(-1);
    protocol.setSelectedIndex(-1);
    for (int i = 0; i < groupPanel.getList().size(); i++) {
      groupPanel.setOnRadioSelected(i, false);
      groupPanel.setOffRadioSelected(i, false);
    }
  }

  /**
   * Creates new form MultiChannelPanel.
   */
  public SNWStationRegexpPanel() {
    err = new ErrorTrack();
    initComponents();
    ArrayList<FlagOnOffPanel> subpanels = new ArrayList<FlagOnOffPanel>(3);
    groupPanel = new FlagOnOffPanel(SNWGroupPanel.getJComboBox());
    subpanels.add(groupPanel);
    javax.swing.JPanel allflags = new AllFlagsPanel(subpanels);
    groupScroll.add(allflags);
    groupScroll.setViewportView(allflags);

    Look();
    gov.usgs.anss.util.UC.Look(fixed);
    gov.usgs.anss.util.UC.Look(disable);
    clearScreen();
  }

  private void Look() {
    UC.Look(this);                    // Set color background
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    labRegexp = new javax.swing.JLabel();
    regexp = new javax.swing.JTextField();
    error = new javax.swing.JTextField();
    stationsPane = new javax.swing.JScrollPane();
    stations = new javax.swing.JTextArea();
    fixed = new javax.swing.JPanel();
    snwRule = SNWRulePanel.getJComboBox();
    labRule = new javax.swing.JLabel();
    labHelp = new javax.swing.JLabel();
    helpString = new javax.swing.JTextField();
    labDisableDate = new javax.swing.JLabel();
    disableDate = new javax.swing.JTextField();
    labComment = new javax.swing.JLabel();
    disableComment = new javax.swing.JTextField();
    disable = new javax.swing.JRadioButton();
    labLatencySaveInt = new javax.swing.JLabel();
    latencySave = new javax.swing.JTextField();
    labProtocol = new javax.swing.JLabel();
    labOperator = new javax.swing.JLabel();
    operator = OperatorPanel.getJComboBox();
    protocol = ProtocolPanel.getJComboBox();
    addUpdate = new javax.swing.JButton();
    reload = new javax.swing.JButton();
    groupScroll = new javax.swing.JScrollPane();

    setMaximumSize(new java.awt.Dimension(800, 800));
    setMinimumSize(new java.awt.Dimension(750, 600));
    setPreferredSize(new java.awt.Dimension(800, 800));
    setRequestFocusEnabled(false);
    labRegexp.setText("RegExp (or WHERE clause):");
    add(labRegexp);

    regexp.setColumns(30);
    regexp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        regexpActionPerformed(evt);
      }
    });
    regexp.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        regexpFocusLost(evt);
      }
    });

    add(regexp);

    error.setBackground(new java.awt.Color(192, 192, 192));
    error.setColumns(50);
    error.setEditable(false);
    add(error);

    stationsPane.setPreferredSize(new java.awt.Dimension(700, 100));
    stations.setColumns(80);
    stations.setFont(new java.awt.Font("Monospaced", 0, 13));
    stations.setRows(50);
    stations.setMaximumSize(new java.awt.Dimension(700, 300));
    stations.setMinimumSize(new java.awt.Dimension(700, 100));
    stations.setPreferredSize(new java.awt.Dimension(960, 800));
    stationsPane.setViewportView(stations);

    add(stationsPane);

    fixed.setLayout(new java.awt.GridBagLayout());

    fixed.setMinimumSize(new java.awt.Dimension(953, 91));
    fixed.setPreferredSize(new java.awt.Dimension(700, 95));
    snwRule.setEditable(true);
    snwRule.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        snwRuleActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fixed.add(snwRule, gridBagConstraints);

    labRule.setText("SNW Rule :");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    fixed.add(labRule, gridBagConstraints);

    labHelp.setText("Help URL:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    fixed.add(labHelp, gridBagConstraints);

    helpString.setColumns(30);
    helpString.setMinimumSize(new java.awt.Dimension(368, 22));
    helpString.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        helpStringActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fixed.add(helpString, gridBagConstraints);

    labDisableDate.setText("Expires :");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    fixed.add(labDisableDate, gridBagConstraints);

    disableDate.setColumns(12);
    disableDate.setMinimumSize(new java.awt.Dimension(152, 22));
    disableDate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        disableDateActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fixed.add(disableDate, gridBagConstraints);

    labComment.setText("Disable Comment:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    fixed.add(labComment, gridBagConstraints);

    disableComment.setColumns(30);
    disableComment.setMinimumSize(new java.awt.Dimension(368, 22));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fixed.add(disableComment, gridBagConstraints);

    disable.setText("Disabled");
    disable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    disable.setMargin(new java.awt.Insets(0, 0, 0, 0));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    fixed.add(disable, gridBagConstraints);

    labLatencySaveInt.setText("Latency Save Int:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    fixed.add(labLatencySaveInt, gridBagConstraints);

    latencySave.setColumns(6);
    latencySave.setMinimumSize(new java.awt.Dimension(80, 22));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fixed.add(latencySave, gridBagConstraints);

    labProtocol.setText("Protocol:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    fixed.add(labProtocol, gridBagConstraints);

    labOperator.setText("Operator:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    fixed.add(labOperator, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fixed.add(operator, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    fixed.add(protocol, gridBagConstraints);

    add(fixed);

    addUpdate.setText("Update Changes");
    addUpdate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addUpdateActionPerformed(evt);
      }
    });

    add(addUpdate);

    reload.setText("Reload");
    reload.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        reloadActionPerformed(evt);
      }
    });

    add(reload);

    groupScroll.setMaximumSize(new java.awt.Dimension(740, 300));
    groupScroll.setMinimumSize(new java.awt.Dimension(740, 400));
    groupScroll.setPreferredSize(new java.awt.Dimension(740, 400));
    add(groupScroll);

  }// </editor-fold>//GEN-END:initComponents

  private void snwRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snwRuleActionPerformed
// TODO add your handling code here:

  }//GEN-LAST:event_snwRuleActionPerformed

  private void disableDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableDateActionPerformed
// TODO add your handling code here:
  }//GEN-LAST:event_disableDateActionPerformed

  private void reloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadActionPerformed
// TODO add your handling code here:
    SNWRulePanel.reload();
    SNWRulePanel.getJComboBox(snwRule);
    SNWGroupPanel.reload();
    ProtocolPanel.reload();
    ProtocolPanel.getJComboBox(protocol);
    OperatorPanel.reload();
    OperatorPanel.getJComboBox(operator);
    groupPanel.buildFlagPanel(SNWGroupPanel.getJComboBox());

  }//GEN-LAST:event_reloadActionPerformed

  private void addUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUpdateActionPerformed
// TODO add your handling code here:
    if (chkForm()) {
      return;
    }
    int loop = 0;
    while (true && loop < 100) {
      try {
        String[] stats = stations.getText().split("\\s");
        stmtout = DBConnectionThread.getConnection("edge").createStatement(
                ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        int ns = 0;
        for (String stat : stats) {
          if (stat.equals("")) {
            continue;
          }
          Util.prt(ns + " for " + stat);
          ns++;
          if (stat.substring(0, 1).equals("#")) {
            break;      // its the comment
          }
          try (ResultSet rs = stmtout.executeQuery("SELECT * FROM edge.snwstation where network='" + stat.substring(0, 2) + "' AND snwstation='" + stat.substring(2) + "'")) {
            if (rs.next()) {
              if (snwRule.getSelectedIndex() != -1) {
                Util.prt("   Set SNWRule=" + snwRule.getSelectedItem());
                rs.updateInt("snwruleid", ((SNWRule) snwRule.getSelectedItem()).getID());
              }
              if (operator.getSelectedIndex() != -1) {
                Util.prt("   Set Operator=" + operator.getSelectedItem());
                rs.updateInt("operatorid", ((Operator) operator.getSelectedItem()).getID());
              }
              if (protocol.getSelectedIndex() != -1) {
                Util.prt("   Set protocol=" + protocol.getSelectedItem());
                rs.updateInt("protocolid", ((Protocol) protocol.getSelectedItem()).getID());
              }
              if (!helpString.getText().equals("")) {
                Util.prt("help0=" + helpString.getText());
                rs.updateString("helpstring", helpString.getText());
              }
              if (!latencySave.getText().equals("")) {
                rs.updateInt("latencysaveinterval", latencySaveInt);
              }
              if (disable.isSelected()) {
                rs.updateInt("disable", 1);
                rs.updateString("disableExpires", disDate.toString());
                rs.updateString("disableComment", disableComment.getText());
              }

              // Update the groups if marked
              long mask = rs.getLong("groupmask");
              boolean changed = false;
              ArrayList group = groupPanel.getList();
              Util.prt("   Group Mask before =" + Util.toHex(mask));
              for (int i = 0; i < group.size(); i++) {
                if (groupPanel.isOffRadioSelected(i)) {
                  mask &= ~((SNWGroup) group.get(i)).getMask();
                  changed = true;
                  Util.prt("   unset group " + group.get(i));
                }
                if (groupPanel.isOnRadioSelected(i)) {
                  mask |= ((SNWGroup) group.get(i)).getMask();
                  changed = true;
                  Util.prt("   set group " + group.get(i));
                }
              }
              Util.prt("   changed=" + changed + " after=" + Util.toHex(mask));
              if (changed) {
                rs.updateLong("groupmask", mask);
              }

              // Changes are done, Update the row.
              rs.updateRow();
            } else {
              Util.prt("Skiping stat=" + stat + " not in database!");
            }
          }
        }
        stmtout.close();
        break;
      } catch (SQLException e) {
        Util.SQLErrorPrint(e, "Trying to update from RegexpPanel");
      }
      Util.prta("SNWStationRE did not update in one pass.  Wait 10 seconds and try again loop=" + loop);
      if (loop++ > 12) {
        break;
      }
      Util.sleep(5000);
    }
    clearScreen();
  }//GEN-LAST:event_addUpdateActionPerformed

  private void regexpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regexpFocusLost
    doRegexp();
  }//GEN-LAST:event_regexpFocusLost

  private void regexpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexpActionPerformed
    // Need to run list of matching stations, populate the stations text area
    doRegexp();
    regexp.transferFocus();

  }//GEN-LAST:event_regexpActionPerformed
  private void doRegexp() {
    if (regexp.getText().equals("")) {
      return;
    }
    try {
      Connection C = DBConnectionThread.getConnection("edge");
      if (stmt == null) {
        stmt = C.createStatement();
      }
      ResultSet rs;
      clearScreen();
      if (regexp.getText().length() >= 6 && regexp.getText().substring(0, 6).equalsIgnoreCase("SELECT")) {
        String s = regexp.getText();
        Util.prt(s);
        rs = stmt.executeQuery(regexp.getText());
      } else if (regexp.getText().length() >= 5 && regexp.getText().substring(0, 5).equalsIgnoreCase("WHERE")) {
        rs = stmt.executeQuery("SELECT * FROM edge.snwstation " + regexp.getText() + " ORDER BY snwstation");
      } else {
        rs = stmt.executeQuery("SELECT * FROM edge.snwstation WHERE snwstation REGEXP '"
                + regexp.getText() + "' ORDER BY snwstation");
      }
      String lastStation = "";
      StringBuilder sb = new StringBuilder(1000);

      groupPanel.setAllClear();
      ArrayList group = groupPanel.getList();
      long[] groups = new long[group.size()];
      nstat = 0;
      for (int i = 0; i < group.size(); i++) {
        groups[i] = -1;
      }

      // for each member of the selected set, see if all of the parameters are set the 
      // same by calling chkParm for each value.  the parameter check must be initialized
      // to -1 to start.
      ruleID = -1;
      while (rs.next()) {
        String stat = (rs.getString("network") + "  ").substring(0, 2) + (rs.getString("snwstation") + "        ").substring(0, 6);
        sb.append(stat).append(" ");
        nstat++;
        if (nstat % 8 == 0) {
          sb.append("\n");
        }

        ruleID = chkParm(ruleID, rs.getInt("snwruleid"));
        operatorID = chkParm(operatorID, rs.getInt("operatorid"));
        protocolID = chkParm(protocolID, rs.getInt("protocolid"));
        long mask = rs.getLong("groupmask");
        for (int i = 0; i < group.size(); i++) {
          groups[i] = chkParm(groups[i], ((SNWGroup) group.get(i)).getMask() & mask);
        }
      }
      sb.append("\n#").append(nstat).append(" stations selected\n");
      addUpdate.setText("Update " + nstat + " stations");
      stations.setText(sb.toString());
      SNWRulePanel.setJComboBoxToID(snwRule, ruleID);
      ProtocolPanel.setJComboBoxToID(protocol, protocolID);
      OperatorPanel.setJComboBoxToID(operator, operatorID);

      // Set on off or neither as determined by the chkParms
      for (int i = 0; i < group.size(); i++) {
        if (groups[i] != -2) {
          if (groups[i] == 0) {
            groupPanel.setOff(i);
          } else {
            groupPanel.setOn(i);
          }
        }
      }
    } catch (SQLException e) {
      stations.setText("SQL error getting stations\n" + e.getMessage() + "\n" + e.getErrorCode() + "\n" + e.getSQLState());
    }
  }

  /**
   * The chkParms work this way. User sets commID to -1 at beginning. It then calls chkParm(commID,
   * i) where i is each succeeding value for a member of the selected set. chkParms return -2 when
   * parameters are found not to be set all the same and the value when they are all set the same
   */
  private int chkParm(int commID, int i) {
    if (commID != -2) {
      if (commID == -1) {
        commID = i;
      }
      if (commID != i) {
        commID = -2;
      }
    }
    return commID;
  }

  private String chkParm(String commID, String i) {
    if (!commID.equals("CHG")) {
      if (commID.equals("")) {
        commID = i;
      }
      if (!commID.equals(i)) {
        commID = "CHG";
      }
    }
    return commID;
  }

  private long chkParm(long commID, long i) {
    if (commID != -2) {
      if (commID == -1) {
        commID = i;
      }
      if (commID != i) {
        commID = -2;
      }
    }
    return commID;
  }

  private void helpStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpStringActionPerformed
// TODO add your handling code here:
  }//GEN-LAST:event_helpStringActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addUpdate;
  private javax.swing.JRadioButton disable;
  private javax.swing.JTextField disableComment;
  private javax.swing.JTextField disableDate;
  private javax.swing.JTextField error;
  private javax.swing.JPanel fixed;
  private javax.swing.JScrollPane groupScroll;
  private javax.swing.JTextField helpString;
  private javax.swing.JLabel labComment;
  private javax.swing.JLabel labDisableDate;
  private javax.swing.JLabel labHelp;
  private javax.swing.JLabel labLatencySaveInt;
  private javax.swing.JLabel labOperator;
  private javax.swing.JLabel labProtocol;
  private javax.swing.JLabel labRegexp;
  private javax.swing.JLabel labRule;
  private javax.swing.JTextField latencySave;
  private javax.swing.JComboBox operator;
  private javax.swing.JComboBox protocol;
  private javax.swing.JTextField regexp;
  private javax.swing.JButton reload;
  private javax.swing.JComboBox snwRule;
  private javax.swing.JTextArea stations;
  private javax.swing.JScrollPane stationsPane;
  // End of variables declaration//GEN-END:variables
  /**
   * This main displays the form Pane by itself
   *
   * @param args command line args ignored
   */
  public static void main(String args[]) {
    DBConnectionThread jcjbl;
    Util.init(UC.getPropertyFilename());
    UC.init();
    try {
      // Make test DBconnection for form
      jcjbl = new DBConnectionThread(DBConnectionThread.getDBServer(), DBConnectionThread.getDBCatalog(),
              UC.defaultUser(), UC.defaultPassword(), true, false, DBConnectionThread.getDBSchema(), DBConnectionThread.getDBVendor());
      if (!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema())) {
        if (!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema())) {
          if (!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema())) {
            Util.prt("Could not connect to DB " + jcjbl);
            System.exit(1);
          }
        }
      }
      Show.inFrame(new SNWStationPanel(), UC.XSIZE, UC.YSIZE);
    } catch (InstantiationException e) {
    }
  }

}
