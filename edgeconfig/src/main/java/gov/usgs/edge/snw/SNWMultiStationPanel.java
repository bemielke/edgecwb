/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */

package gov.usgs.edge.snw;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.util.ErrorTrack;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.Util;
import gov.usgs.edge.config.UC;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
/**
 *
 * @author  davidketchum
 */
public final class SNWMultiStationPanel extends javax.swing.JPanel {
  private Statement stmt;
  private final javax.swing.JPanel stationPanel;
  ArrayList<SNWStationSubPanel> stations;
  private final ErrorTrack err;
  
  /** Creates new form MultiChannelPanel. */
  public SNWMultiStationPanel() {
    initComponents();
    err = new ErrorTrack();
    stationPanel = new javax.swing.JPanel();
    stations = new ArrayList<SNWStationSubPanel>(100);
    Look();
    stationScroll.add(stationPanel);
    stationScroll.setViewportView(stationPanel);
  }
  private void Look() {
    UC.Look(this);                    // Set color background
  }
  private void clearScreen() {
    regexp.setText("");
    stationPanel.removeAll();
    stations.clear();
    
  }
  private void doRegexp() {
    if(regexp.getText().equals("")) return;
    try {
      Connection C = DBConnectionThread.getConnection("edge");
      if(stmt == null) stmt = C.createStatement();
      ResultSet rs;
      if(regexp.getText().length() >= 5 && regexp.getText().substring(0,5).equalsIgnoreCase("WHERE")) {
        rs = stmt.executeQuery("SELECT snwstation FROM edge.snwstation "+regexp.getText()+" ORDER BY snwstation");
      }
      else {
        rs = stmt.executeQuery("SELECT snwstation FROM edge.snwstation WHERE snwstation REGEXP '"+
          regexp.getText()+"' ORDER BY snwstation");
      }
      
      // for each member of the selected set, see if all of the parameters are set the 
      // same by calling chkParm for each value.  the parameter check must be initialized
      // to -1 to start.
      double height = 0.;
      double width = 0.;
      stations.clear();
      stationPanel.removeAll();
      while (rs.next()) {
        String stat = (rs.getString("snwstation")+"            ").substring(0,12);
        Util.prt("New SNWStationSubPanel for "+stat);
        SNWStationSubPanel cp = new SNWStationSubPanel(stat);
        stations.add(cp);
        height += cp.getPreferredSize().getHeight();
        width = cp.getPreferredSize().getWidth();
        stationPanel.add(cp);
      }
      rs.close();
      Util.prt("Set size to "+width+" "+height);
      stationPanel.setPreferredSize(new Dimension((int) width, (int) height));
      stationPanel.setMinimumSize(new Dimension((int) width, (int) height));
    }
    catch (SQLException e) {
      Util.prt("SQL error getting stations ="+e.getMessage()+"\n"+e.getErrorCode()+"\n"+e.getSQLState());
    }  
    
  }  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    stationScroll = new javax.swing.JScrollPane();
    labRegexp = new javax.swing.JLabel();
    regexp = new javax.swing.JTextField();
    addUpdate = new javax.swing.JButton();
    error = new javax.swing.JTextField();

    stationScroll.setMinimumSize(new java.awt.Dimension(750, 625));
    stationScroll.setPreferredSize(new java.awt.Dimension(750, 625));

    labRegexp.setText("Regexp or Where :");
    add(labRegexp);

    regexp.setColumns(40);
    regexp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        regexpActionPerformed(evt);
      }
    });
    regexp.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        regexpFocusGained(evt);
      }
      public void focusLost(java.awt.event.FocusEvent evt) {
        regexpFocusLost(evt);
      }
    });

    add(regexp);

    addUpdate.setText("Update All");
    addUpdate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addUpdateActionPerformed(evt);
      }
    });

    add(addUpdate);

    error.setBackground(new java.awt.Color(204, 204, 204));
    error.setColumns(80);
    error.setEditable(false);
    error.setFont(new java.awt.Font("#PCMyungjo", 0, 10));
    add(error);

  }// </editor-fold>//GEN-END:initComponents

  private void regexpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regexpFocusLost
// TODO add your handling code here:
    doRegexp();
  }//GEN-LAST:event_regexpFocusLost

  private void regexpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regexpFocusGained
// TODO add your handling code here:
    doRegexp();
  }//GEN-LAST:event_regexpFocusGained

  private void addUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUpdateActionPerformed
// TODO add your handling code here:
    err.reset();
    error.setText("");
    boolean anyerror=false;
    // scan all of the channel panels to make sure they are postable, update our error if not
    for(int i=0; i<stations.size(); i++) {
      ((SNWStationSubPanel) stations.get(i)).chkForm(err);
      if(err.isSet()) {
        error.setBackground(UC.red);
        anyerror=true;
        error.setText(error.getText()+((SNWStationSubPanel) stations.get(i)).getStation()+" "+err.getText());
      }
    }
    if(anyerror) {
      error.setBackground(UC.red);
      return;     // An error occurred - do not post!
    }
    
    error.setBackground(UC.look);
    err.reset();
    for(int i=0; i<stations.size(); i++) {
      ((SNWStationSubPanel) stations.get(i)).updateRecord(err);
    }
    if(err.isSet()) {
      error.setBackground(UC.red);
      error.setText(err.getText());
    }
    clearScreen();
  }//GEN-LAST:event_addUpdateActionPerformed

  private void regexpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexpActionPerformed
    doRegexp();
    regexp.transferFocus();
  }//GEN-LAST:event_regexpActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addUpdate;
  private javax.swing.JTextField error;
  private javax.swing.JLabel labRegexp;
  private javax.swing.JTextField regexp;
  private javax.swing.JScrollPane stationScroll;
  // End of variables declaration//GEN-END:variables
   /** This main displays the form Pane by itself
   *@param args command line args ignored*/
  public static void main(String args[]) {
        DBConnectionThread jcjbl;
    Util.init(UC.getPropertyFilename());
    UC.init();
    try {
        // Make test DBconnection for form
      jcjbl = new DBConnectionThread(DBConnectionThread.getDBServer(),DBConnectionThread.getDBCatalog(),
              UC.defaultUser(),UC.defaultPassword(), true, false, DBConnectionThread.getDBSchema(), DBConnectionThread.getDBVendor());
      if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
        if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          {Util.prt("Could not connect to DB "+jcjbl); System.exit(1);}
      Show.inFrame(new SNWMultiStationPanel(), UC.XSIZE, UC.YSIZE);
    }
    catch(InstantiationException e) {}
  }
  

}
