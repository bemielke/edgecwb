/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */

/*
 * Login.java
 *
 * Created on March 10, 2000, 1:55 PM
 */

package gov.usgs.edge.config;

import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.db.DBSetup;
import gov.usgs.anss.db.JDBConnection;
import gov.usgs.anss.gui.ChangePasswordDialog;
import gov.usgs.anss.util.User;
import gov.usgs.anss.util.UserPropertiesPanel;
import gov.usgs.anss.util.Util;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javax.swing.JButton;


/** 
 * @author  ketchum
 * @version 
 */
public class Login extends javax.swing.JPanel
{
  private static final String DEFAULT_USER = "user";
  private static final String DEFAULT_PASSWORD = "";
  protected static String username;
  private static DBConnectionThread dbConnection;
  /* Whether to offer to change a blank password after logging in. */
  private static final boolean CHANGE_BLANK_PASSWORDS = true;

  private final EdgeConfig app;      // Handle to applet
  private final boolean exitNext;
  JButton importCert;
  /** Creates new form Login 
   * @param app The EdgeConfig app which is calling us
   */
  public Login(EdgeConfig app) { 
    this.app=app;
    exitNext = false;
    initComponents();
    importCert = new JButton("Setup Certs");
    importCert.addActionListener(new java.awt.event.ActionListener() {
      @Override
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        doCertActionPerformed(evt);
      }
    });
    UC.Look(sslCheckBox);
    if(Util.getProperty("SSLOff").equals("true")) sslCheckBox.setSelected(false);
    else sslCheckBox.setSelected(true);
    if(Util.getProperty("SSLEnabled") == null) {
      sslCheckBox.setEnabled(false); 
      sslCheckBox.setSelected(false);
      sslCheckBox.setVisible(false);
      importCert.setVisible(true);
    }
    else sslCheckBox.setEnabled(true);
    startText();
    UC.Look(holdingReports);
    DBSetup.checkEmpty();
    Util.getProperties().list(System.out);
    add(new UserPropertiesPanel());
    user.requestFocus();
    add(importCert);
  }
  private void doCertActionPerformed(java.awt.event.ActionEvent evt) {
    try {
      ImportCACert.main(new String [0]);
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }                                

  private void startText() {
    UC.Look(this);
    text.setText(
      "USGS EdgeConfig login.  Please enter your username which is normally your\n"+
      "initials and your super secret password.  If you cannot get past this\n"+
      "screen either the server is down your password is not right. \n\n "+
      "To report problems call Dave Ketchum at (303) 520-5840 or \n"+
      "email ketchum@usgs.gov\n"+
      "\n\n\nVersion : "+Version.getVersion()+"\n"+Util.getDBServer());    
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    lblUser = new javax.swing.JLabel();
    user = new javax.swing.JTextField();
    lblPassword = new javax.swing.JLabel();
    passwordEntered = new javax.swing.JPasswordField();
    sslCheckBox = new javax.swing.JCheckBox();
    holdingReports = new javax.swing.JCheckBox();
    errorText = new javax.swing.JTextField();
    jSeparator1 = new javax.swing.JSeparator();
    text = new javax.swing.JTextArea();

    setPreferredSize(new java.awt.Dimension(460, 480));

    lblUser.setText("Username:");
    add(lblUser);

    user.setColumns(15);
    user.setToolTipText("Enter a Your username (initials)");
    user.setMinimumSize(new java.awt.Dimension(194, 28));
    user.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        userActionPerformed(evt);
      }
    });
    user.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        userFocusLost(evt);
      }
    });
    add(user);

    lblPassword.setText("Password:");
    add(lblPassword);

    passwordEntered.setColumns(12);
    passwordEntered.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jPasswordField1ActionPerformed(evt);
      }
    });
    passwordEntered.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        passwordEnteredFocusLost(evt);
      }
    });
    add(passwordEntered);

    sslCheckBox.setText("Use SSL");
    add(sslCheckBox);

    holdingReports.setText("Add Holding History Reports?");
    add(holdingReports);

    errorText.setColumns(50);
    errorText.setEditable(false);
    errorText.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
    errorText.setPreferredSize(new java.awt.Dimension(608, 40));
    errorText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        errorTextFocusGained(evt);
      }
    });
    add(errorText);

    jSeparator1.setPreferredSize(new java.awt.Dimension(750, 10));
    add(jSeparator1);

    text.setEditable(false);
    text.setColumns(60);
    text.setRows(15);
    text.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    text.setMinimumSize(new java.awt.Dimension(652, 18));
    text.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        textFocusGained(evt);
      }
    });
    add(text);
  }// </editor-fold>//GEN-END:initComponents

  private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
// Add your handling code here:
    if(exitNext) System.exit(0);
    user.transferFocus();
  }//GEN-LAST:event_userActionPerformed

  private void userFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userFocusLost
// Add your handling code here:
    if (exitNext)
      System.exit(0);

    if (evt.isTemporary())
      return;
    if (user.getText().equals(""))
      user.setText(DEFAULT_USER);
    User tmp =new User(user.getText());
    String db = DBConnectionThread.getDBCatalog();
    errorText.setText((UC.isTestDB() ? "Test " : "") + db + " database will be used");
    text.setText((UC.isTestDB() ? "Test " : "") + db
            + " database will be used\n" + text.getText()
            + "\n dbg=" + Util.isDebug() + " app=" + Util.getIsApplet());
  }//GEN-LAST:event_userFocusLost

  private void textFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFocusGained
// Add your handling code here:
    if(exitNext) System.exit(0);
    text.transferFocus();
  }//GEN-LAST:event_textFocusGained

  private void errorTextFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_errorTextFocusGained
// Add your handling code here:
    if(exitNext) System.exit(0);
    errorText.transferFocus();
  }//GEN-LAST:event_errorTextFocusGained

  private void passwordEnteredFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordEnteredFocusLost
    if(!inLogin) login();
  }//GEN-LAST:event_passwordEnteredFocusLost
  boolean inLogin;
  private void login() {
    if(inLogin) return;
    inLogin=true;
    Connection C;
    String passwd;
    User newuser;

    if (exitNext)
      System.exit(0);

    username = user.getText();
    passwd = new String(passwordEntered.getPassword());

    Util.prta("In login user="+username);
    if (username.equals("") && Util.isDebug()) {
      Util.prt("Setting Default");
      username = DEFAULT_USER;
      user.setText(username);
    } else {
      errorText.setText("You must enter a user name! Try again");
    }
    if (passwd.equals("") && username.equals(DEFAULT_USER))
      passwd = DEFAULT_PASSWORD;

    errorText.setText("Logging in user : '" + username + "' - Please Wait");
    Util.prta("create DBConnection "+UC.JDBCHost()+"/"+UC.JDBCCatalog()+":"+username);
    
    // Fix any USGS changed properties.
    if(Util.getProperty("DBServer") == null && Util.getProperty("MySQLServer") != null) 
      Util.setProperty("DBServer", Util.getProperty("MySQLServer")+"/3306:edge:mysql:eddge");
    if(Util.getProperty("MySQLServer") == null) 
      Util.setProperty("MySQLServer", Util.getProperty("DBServer"));
    //if(Util.getProperty("MetaDBServer") == null) 
    //  Util.setProperty("MetaDBServer", Util.getProperty("DBServer").replaceAll("edge","metadata"));
    if(Util.getProperty("StatusDBServer") == null) 
      Util.setProperty("StatusDBServer", Util.getProperty("DBServer").replaceAll("edge","status"));

    // If the user name is 'user', lookup the key on this computer
    if(user.getText().equalsIgnoreCase("user")) {
      String [] s = DBSetup.quickGet(Util.getProperty("DBServer"), "user");
      if(s.length == 2) {
        username=s[0];
        passwd=s[1];
      }     
    }
    else {
      // We have an entered username and password, put them in a truststore
      DBSetup.quickMake(Util.getProperty("DBServer"), "user:"+username+"="+passwd);
      if(Util.getProperty("MetaDBServer") != null) 
        DBSetup.quickMake(Util.getProperty("MetaDBServer"), "user:"+username+"="+passwd);
      DBSetup.quickMake(Util.getProperty("StatusDBServer"), "user:"+username+"="+passwd);
    }
    
    while (true) {
      try {
        DBConnectionThread.init(Util.getProperty("DBServer"));
        dbConnection =new DBConnectionThread(DBConnectionThread.getDBServer(),DBConnectionThread.getDBSchema(),
                username, passwd, true, false,  DBConnectionThread.getDBSchema(), DBConnectionThread.getDBVendor());
        if(!DBConnectionThread.waitForConnection( DBConnectionThread.getDBSchema()))
          if(!DBConnectionThread.waitForConnection( DBConnectionThread.getDBSchema()))
            if(!DBConnectionThread.waitForConnection( DBConnectionThread.getDBSchema()))
              if(!DBConnectionThread.waitForConnection( DBConnectionThread.getDBSchema()))
              if(!DBConnectionThread.waitForConnection( DBConnectionThread.getDBSchema()))
              if(!DBConnectionThread.waitForConnection( DBConnectionThread.getDBSchema()))
                if(!DBConnectionThread.waitForConnection( DBConnectionThread.getDBSchema())) {
                  Util.prt("Did not get"+ DBConnectionThread.getDBCatalog()+":"+DBConnectionThread.getDBSchema()+" connection");
                  javax.swing.JOptionPane.showMessageDialog(EdgeConfig.aFrame,
                  "Could not connect to "+ DBConnectionThread.getDBCatalog()+":"+DBConnectionThread.getDBSchema()+" database - check your username and password.  They are case sensitive!",
                               "Bad Login",
                               javax.swing.JOptionPane.INFORMATION_MESSAGE);
                System.exit(1);
            }
        dbConnection =new DBConnectionThread(DBConnectionThread.getDBServer(),"alarm",
                username, passwd, true, false,  "alarm", DBConnectionThread.getDBVendor());
        if (Util.getProperty("MetaDBServer") != null) {
          dbConnection =new DBConnectionThread(Util.getProperty("MetaDBServer"),"metadata",
                username, passwd, true, false,  "metadata", DBConnectionThread.getDBVendor());
                  if(!DBConnectionThread.waitForConnection("metadata")) 
          if(!DBConnectionThread.waitForConnection("metadata")) 
          if(!DBConnectionThread.waitForConnection("metadata")) 
          if(!DBConnectionThread.waitForConnection("metadata")) 
          if(!DBConnectionThread.waitForConnection("metadata")) 
          if(!DBConnectionThread.waitForConnection("metadata")) 
            Util.prt(" ****** Did not get metadata connection");
        }
        dbConnection =new DBConnectionThread(Util.getProperty("StatusDBServer"),"status",
                username, passwd, false, false,  "gap", DBConnectionThread.getDBVendor());
        if(!DBConnectionThread.waitForConnection("alarm")) 
          if(!DBConnectionThread.waitForConnection("alarm")) 
          if(!DBConnectionThread.waitForConnection("alarm")) 
          if(!DBConnectionThread.waitForConnection("alarm")) 
          if(!DBConnectionThread.waitForConnection("alarm")) 
          if(!DBConnectionThread.waitForConnection("alarm")) 
            Util.prt(" ****** Did not get alarm connection");

        if(!DBConnectionThread.waitForConnection("gap")) 
          if(!DBConnectionThread.waitForConnection("gap")) 
          if(!DBConnectionThread.waitForConnection("gap")) 
          if(!DBConnectionThread.waitForConnection("gap")) 
          if(!DBConnectionThread.waitForConnection("gap")) 
          if(!DBConnectionThread.waitForConnection("gap")) 
          if(!DBConnectionThread.waitForConnection("gap")) 
            Util.prt(" ****** Did not get gap connection");
        newuser = new User("edge", DBConnectionThread.getConnection(DBConnectionThread.getDBSchema()), username);
        break;
      } 
      catch(InstantiationException e) {
        Util.prt("Instantiation exception trying to open the databases e="+e);
        System.exit(1);
      }

    }

    /* Store the connection globally. */

    /* Offer to set the user's password if it is blank. */
    if (passwd.equals("") && CHANGE_BLANK_PASSWORDS)
      new ChangePasswordDialog(EdgeConfig.aFrame, JDBConnection.getConnection("edge"), username, ChangePasswordDialog.SET_PASSWORD).setVisible(true);
    passwd="";    // Wipe the password

    /* Check for a new version. */
    Date newVersion;

    newVersion = getNewVersion(DBConnectionThread.getThread(DBConnectionThread.getDBSchema()));
    if (newVersion != null) {
      javax.swing.JOptionPane.showMessageDialog(EdgeConfig.aFrame,passwd+
              "A more recent version of this program exists"
              + " (" + Version.VERSION_FORMAT.format(newVersion) + ")."
              + "\nPlease download it.",
              "New version", javax.swing.JOptionPane.INFORMATION_MESSAGE);
      System.exit(0);
    }

    //Util.prt("password " + passwordEntered.getPassword());
    //Util.prt("password string=" + passwd);
    if (UC.isTestDB()) // On-screen debug.
      Util.debug(true);
    else
      Util.debug(false);
    Util.setApplet(false);

    Util.prt("User2 logged in : " + User.getUser()
      + " Master:" + User.getMaster());
    setVisible(false);
    errorText.setText("Welcome - Building menus...");
    repaint();

    String title = app.getTitle() + " - " + DBConnectionThread.getDBServer();
    /* sslCheckBox being selected is no guarantee that the connection is
       actually using SSL. Unless the connection was made with the property
       "requireSSL=true", the connection may not be using SSL even if it was
       selected. I have not found a way to test the connection directly for SSL
       short of setting the system property "javax.net.debug=all" and parsing
       System.out. */
    if (sslCheckBox.isSelected())
      title += " - using SSL";
    app.setTitle(title);

    //UC.setFedCtr();       // If fed ctr override some data
    // Util.prt("Call build users="+C); 
    // if(!versionOK) System.exit(0);
    app.buildMenus(new User(user.getText()), DBConnectionThread.getThread(DBConnectionThread.getDBSchema()), 
            holdingReports.isSelected());
    //inLogin=false;
  }

/**
   * See if the version in the database is newer than that returned by
   * Version.getVersion().
   *
   * @param connection the connection over which to check the version
   * @return the date of the version in the database if it is newer, or null if
   * it is not
   */
  private static Date getNewVersion(DBConnectionThread connection)
  {
    Statement statement;
    ResultSet rs;
    String dateString;
    Date codeVersion, databaseVersion;

    try {
      statement = connection.getConnection().createStatement();
      try {
        rs = statement.executeQuery("SELECT * FROM edge.version WHERE ID=1");
        if (rs.next()) {
          dateString = rs.getString("version"); // database version
          rs.close();
          codeVersion =Version.VERSION_FORMAT.parse(gov.usgs.anss.gui.Version.getVersion());//code version
          databaseVersion = Version.VERSION_FORMAT.parse(dateString);// database version
          if (databaseVersion.after(codeVersion)) {
            statement.close();
            return databaseVersion;
          }
        }
      } finally {
        statement.close();
      }
    } catch (SQLException | java.text.ParseException e) {
    }

    return null;
  }

  private void jPasswordField1ActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
// Add your handling code here:
    if(!inLogin) login();
  }//GEN-LAST:event_jPasswordField1ActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField errorText;
  private javax.swing.JCheckBox holdingReports;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JLabel lblPassword;
  private javax.swing.JLabel lblUser;
  private javax.swing.JPasswordField passwordEntered;
  private javax.swing.JCheckBox sslCheckBox;
  private javax.swing.JTextArea text;
  private javax.swing.JTextField user;
  // End of variables declaration//GEN-END:variables
  public static void main(String args[]) {
   //Show.inFrame(new Login(), 600, 480);
  }
}
