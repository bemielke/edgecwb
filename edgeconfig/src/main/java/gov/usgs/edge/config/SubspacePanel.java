/*
 *  This software is in the public domain because it contains materials 
 *  that originally came from the United States Geological Survey, 
 *  an agency of the United States Department of Interior. For more 
 *  information, see the official USGS copyright policy at 
 *  http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */
package gov.usgs.edge.config;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.util.Util;
import gov.usgs.anss.util.UC;
import java.sql.*;
/**
 *
 * @author U.S. Geological Survey  <ketchum at usgs.gov>
 */
public class SubspacePanel extends javax.swing.JPanel {
  boolean isNew;
  private static  Subspace subspace;
  public static Subspace getConfig() {return subspace;}
  /**
   * Creates new form Subspace
   */
  public SubspacePanel() {
    initComponents();
    UC.Look(this);
    try {
      ResultSet rs = DBConnectionThread.getThread("edge").getNewStatement(false).executeQuery("SELECT * FROM subspace where id=1");
      if(rs.next()) {
        cwbip.setText(rs.getString("cwbip"));
        cwbport.setText(rs.getInt("cwbport")+"");
        ssdcwbip.setText(rs.getString("ssdcwbip"));
        ssdcwbport.setText(rs.getInt("ssdcwbport")+"");
        ssdinsertport.setText(rs.getInt("ssdinsertport")+"");
        opsArgs.setText(rs.getString("opsargs"));
        researchArgs.setText(rs.getString("researchargs"));
        subspace = new Subspace(rs);
        rs.close();
      }
      else {
        isNew = true;
      }
    }
    catch(SQLException e) {
      e.printStackTrace();
    }
    
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    labcwbip = new javax.swing.JLabel();
    cwbip = new javax.swing.JTextField();
    sdfs = new javax.swing.JLabel();
    cwbport = new javax.swing.JTextField();
    labssdip = new javax.swing.JLabel();
    ssdcwbip = new javax.swing.JTextField();
    ssdcwbport = new javax.swing.JTextField();
    labinsertport = new javax.swing.JLabel();
    ssdinsertport = new javax.swing.JTextField();
    update = new javax.swing.JButton();
    status = new javax.swing.JTextField();
    labcwbport = new javax.swing.JLabel();
    warning = new javax.swing.JLabel();
    opsargLab = new javax.swing.JLabel();
    opsArgs = new javax.swing.JTextField();
    researchLab = new javax.swing.JLabel();
    researchArgs = new javax.swing.JTextField();

    setMinimumSize(new java.awt.Dimension(550, 500));
    setPreferredSize(new java.awt.Dimension(550, 500));
    setLayout(new java.awt.GridBagLayout());

    labcwbip.setText("CWB IP :");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    add(labcwbip, gridBagConstraints);

    cwbip.setMinimumSize(new java.awt.Dimension(500, 26));
    cwbip.setPreferredSize(new java.awt.Dimension(500, 26));
    cwbip.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cwbipActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.ipadx = 70;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(29, 27, 0, 0);
    add(cwbip, gridBagConstraints);

    sdfs.setText("SSDPort:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 11;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    add(sdfs, gridBagConstraints);

    cwbport.setMinimumSize(new java.awt.Dimension(500, 26));
    cwbport.setPreferredSize(new java.awt.Dimension(500, 26));
    cwbport.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cwbportActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.ipadx = 70;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 27, 0, 0);
    add(cwbport, gridBagConstraints);

    labssdip.setText("SSDCWBIP:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 22, 0, 0);
    add(labssdip, gridBagConstraints);

    ssdcwbip.setMinimumSize(new java.awt.Dimension(550, 26));
    ssdcwbip.setPreferredSize(new java.awt.Dimension(550, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 10;
    add(ssdcwbip, gridBagConstraints);

    ssdcwbport.setMinimumSize(new java.awt.Dimension(550, 26));
    ssdcwbport.setPreferredSize(new java.awt.Dimension(550, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 11;
    add(ssdcwbport, gridBagConstraints);

    labinsertport.setText("SSDInsertPort:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 13;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    add(labinsertport, gridBagConstraints);

    ssdinsertport.setMinimumSize(new java.awt.Dimension(550, 26));
    ssdinsertport.setPreferredSize(new java.awt.Dimension(550, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 13;
    add(ssdinsertport, gridBagConstraints);

    update.setText("Update");
    update.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        updateActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 17;
    add(update, gridBagConstraints);

    status.setMinimumSize(new java.awt.Dimension(600, 26));
    status.setPreferredSize(new java.awt.Dimension(600, 26));
    status.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        statusActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 18;
    add(status, gridBagConstraints);

    labcwbport.setText("CWBPort:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    add(labcwbport, gridBagConstraints);

    warning.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
    warning.setText("This screen sets defaults for ALL Subspace Areas");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    add(warning, gridBagConstraints);

    opsargLab.setText("Ops Args:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 14;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    add(opsargLab, gridBagConstraints);

    opsArgs.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
    opsArgs.setMinimumSize(new java.awt.Dimension(550, 26));
    opsArgs.setPreferredSize(new java.awt.Dimension(550, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 14;
    add(opsArgs, gridBagConstraints);

    researchLab.setText("Research Args:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 15;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
    add(researchLab, gridBagConstraints);

    researchArgs.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
    researchArgs.setMinimumSize(new java.awt.Dimension(550, 26));
    researchArgs.setPreferredSize(new java.awt.Dimension(550, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 15;
    add(researchArgs, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents

  private void cwbportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cwbportActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_cwbportActionPerformed

  private void cwbipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cwbipActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_cwbipActionPerformed

  private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
    try {
      int port = Integer.parseInt(cwbport.getText());
      int ssdport = Integer.parseInt(ssdcwbport.getText());
      int insport = Integer.parseInt(ssdinsertport.getText());
      if(isNew) {
        DBConnectionThread.getThread("edge").getNewStatement(true).executeUpdate(
                "INSERT INTO subspace (id, cwbip, cwbport, ssdcwbip, ssdcwbport,  ssdinsertport, opsargs, researchargs) VALUES (1,'"+
                        cwbip.getText()+"',"+port+",'"+ssdcwbip.getText()+"',"+ssdport+","+insport
                        +",'"+opsArgs.getText()+"','"+researchArgs.getText()+"'"+")");
      }
      else {
        DBConnectionThread.getThread("edge").getStatement().executeUpdate(
                "UPDATE subspace set cwbip='"+cwbip.getText()+"',cwbport="+port
              +",ssdcwbip='"+ssdcwbip.getText()+"',ssdcwbport="+ssdport
              +",ssdinsertport="+insport
              + ",opsargs='"+opsArgs.getText()+"',researchargs='"+researchArgs.getText()+"' WHERE id=1");
      }
      status.setText("Update is O.K.");
      try (ResultSet rs = DBConnectionThread.getThread("edge").getNewStatement(false).executeQuery("SELECT * FROM subspace where id=1")) {
        rs.next();
        subspace.reload(rs);
      }
    }
    catch(SQLException | NumberFormatException e) {
      e.printStackTrace();
      status.setText("Update not O.K. exception ="+e);
    }
  }//GEN-LAST:event_updateActionPerformed

  private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_statusActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField cwbip;
  private javax.swing.JTextField cwbport;
  private javax.swing.JLabel labcwbip;
  private javax.swing.JLabel labcwbport;
  private javax.swing.JLabel labinsertport;
  private javax.swing.JLabel labssdip;
  private javax.swing.JTextField opsArgs;
  private javax.swing.JLabel opsargLab;
  private javax.swing.JTextField researchArgs;
  private javax.swing.JLabel researchLab;
  private javax.swing.JLabel sdfs;
  private javax.swing.JTextField ssdcwbip;
  private javax.swing.JTextField ssdcwbport;
  private javax.swing.JTextField ssdinsertport;
  private javax.swing.JTextField status;
  private javax.swing.JButton update;
  private javax.swing.JLabel warning;
  // End of variables declaration//GEN-END:variables
}
