/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */

/*
 * MultiChannelPanel.java
 *
 * Created on July 21, 2006, 2:44 PM
 */

package gov.usgs.edge.config;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.util.ErrorTrack;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.Util;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author  davidketchum
 */
public class MultiChannelPanel extends javax.swing.JPanel {
  javax.swing.JPanel channelPanel;
  ArrayList<ChannelPanel> channels;
  ErrorTrack err;
  
  /** Creates new form MultiChannelPanel. */
  public MultiChannelPanel() {
    initComponents();
    err = new ErrorTrack();
    channelPanel = new javax.swing.JPanel();
    channels = new ArrayList<ChannelPanel>(100);
    Look();
    channelScroll.add(channelPanel);
    channelScroll.setViewportView(channelPanel);
  }
    private void Look() {
    UC.Look(this);                    // Set color background
    
  }
    
  private void clearScreen() {
    regexp.setText("");
    channelPanel.removeAll();
    channels.clear();
    
  }
  private void doRegexp() {
    if(regexp.getText().replaceAll(" ","").equals("") || regexp.getText().length() <=1) return;
    try {
      Statement C = DBConnectionThread.getThread("edge").getNewStatement(true);
      ResultSet rs;
      if(regexp.getText().length() >= 5 && regexp.getText().substring(0,5).equalsIgnoreCase("WHERE")) {
        rs = C.executeQuery("SELECT channel FROM edge.channel "+regexp.getText()+" ORDER BY channel LIMIT 100");
      }
      else {
        rs = C.executeQuery("SELECT channel FROM edge.channel WHERE channel REGEXP '"+
          regexp.getText()+"' ORDER BY channel LIMIT 100");
      }
      
      // for each member of the selected set, see if all of the parameters are set the 
      // same by calling chkParm for each value.  the parameter check must be initialized
      // to -1 to start.
      double height = 0.;
      double width = 0.;
      channels.clear();
      channelPanel.removeAll();
      int i=0;
      while (rs.next()) {
        String chan = (rs.getString("channel")+"            ").substring(0,12);
        Util.prt(i+" New ChannelPanel for "+chan);
        ChannelPanel cp = new ChannelPanel(chan);
        channels.add(cp);
        height += cp.getPreferredSize().getHeight()+10;
        width = cp.getPreferredSize().getWidth();
        channelPanel.add(cp);
        i++;
        if(i > 99) 
          JOptionPane.showMessageDialog(null, 
                  "Limit display to 100 channels!  You might want to use 'Regexp Config' instead.", 
                  "Info", JOptionPane.ERROR_MESSAGE);

      }
      rs.close();
      C.close();
      Util.prt("Set size to "+width+" "+height);
      if(height == 0.) {
        channelPanel.add(new JLabel("No channels returned."));
        height=400;
        width=500;
      }
      channelPanel.setPreferredSize(new Dimension((int) width, (int) height));
      channelPanel.setMinimumSize(new Dimension((int) width, (int) height));
      validate();
    }
    catch (SQLException e) {
      Util.prt("SQL error getting channels\n"+e.getErrorCode()+"\n"+e.getSQLState());
      e.printStackTrace();
    }  
    
  }  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    labRegexp = new javax.swing.JLabel();
    regexp = new javax.swing.JTextField();
    addUpdate = new javax.swing.JButton();
    error = new javax.swing.JTextField();
    channelScroll = new javax.swing.JScrollPane();

    labRegexp.setText("Regexp or Where :");
    add(labRegexp);

    regexp.setColumns(40);
    regexp.setToolTipText("Enter a channel name or regular expression here.  This is the fixed field 12 character NNSSSSSCCCLL or a regular expression matching it (. for any characters, [LIST] for list for this character.");
    regexp.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        regexpFocusLost(evt);
      }
    });
    regexp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        regexpActionPerformed(evt);
      }
    });
    add(regexp);

    addUpdate.setText("Update All");
    addUpdate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addUpdateActionPerformed(evt);
      }
    });
    add(addUpdate);

    error.setBackground(new java.awt.Color(204, 204, 204));
    error.setColumns(80);
    error.setEditable(false);
    error.setFont(new java.awt.Font("#PCMyungjo", 0, 10)); // NOI18N
    add(error);

    channelScroll.setMinimumSize(new java.awt.Dimension(750, 625));
    channelScroll.setPreferredSize(new java.awt.Dimension(750, 625));
    add(channelScroll);
  }// </editor-fold>//GEN-END:initComponents

  private void addUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUpdateActionPerformed
// TODO add your handling code here:
    err.reset();
    error.setText("");
    boolean anyerror=false;
    // scan all of the channel panels to make sure they are postable, update our error if not
    for(int i=0; i<channels.size(); i++) {
      ((ChannelPanel) channels.get(i)).chkForm(err);
      if(err.isSet()) {
        error.setBackground(UC.red);
        anyerror=true;
        error.setText(error.getText()+((ChannelPanel) channels.get(i)).getChannel()+" "+err.getText());
      }
    }
    if(anyerror) {
      error.setBackground(UC.red);
      return;     // An error occurred - do not post!
    }
    
    error.setBackground(UC.look);
    err.reset();
    for(int i=0; i<channels.size(); i++) {
      ((ChannelPanel) channels.get(i)).updateRecord(err);
    }
    if(err.isSet()) {
      error.setBackground(UC.red);
      error.setText(err.getText());
    }
    clearScreen();
  }//GEN-LAST:event_addUpdateActionPerformed

  private void regexpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexpActionPerformed
    doRegexp();
    regexp.transferFocus();
  }//GEN-LAST:event_regexpActionPerformed

  private void regexpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regexpFocusLost
    doRegexp();
  }//GEN-LAST:event_regexpFocusLost
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addUpdate;
  private javax.swing.JScrollPane channelScroll;
  private javax.swing.JTextField error;
  private javax.swing.JLabel labRegexp;
  private javax.swing.JTextField regexp;
  // End of variables declaration//GEN-END:variables
 

  /** This main displays the form Pane by itself
   *@param args command line args ignored*/
  public static void main(String args[]) {
    DBConnectionThread jcjbl;
    Util.init(UC.getPropertyFilename());
    UC.init();
    try {
        // Make test DBconnection for form
      jcjbl = new DBConnectionThread(DBConnectionThread.getDBServer(),DBConnectionThread.getDBCatalog(),
              UC.defaultUser(),UC.defaultPassword(), true, false, DBConnectionThread.getDBSchema(), DBConnectionThread.getDBVendor());
      if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
        if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          {Util.prt("Could not connect to DB "+jcjbl); System.exit(1);}
      Show.inFrame(new MultiChannelPanel(), UC.XSIZE, UC.YSIZE);
    }
    catch(InstantiationException e) {}
  }
}
