/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */

package gov.usgs.edge.config;

//package gov.usgs.edge.template;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.db.DBObject;
import gov.usgs.anss.util.ErrorTrack;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.Util;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JComboBox;
/**
 *
 * this Panel does not follow the "general" setup that matches it to a
 * table in the database. EdgemomPanel queries the edgemomsetup table using
 * the RoleID entered in the ComboBox. It then creates one TagPanel for each
 * item returned from the query. The TagPanel allows you to edit the contents
 * of the edgemomsetup. You can also add a edgemomsetup via this panel.
 * You can display help for the edgethread you are editing and you can
 * display the contents of the edgemomsetup configuration file which would
 * result from the present contents for the chosen role NOTE: The configuration
 * file is based upon contents of the Database table, so if you make changes
 * to the edgemomsetup in a TagPanel then you must use the Check button to
 * verify legal input and then click the Post Changes button to write them
 * to the database.
 * 
 *
  * <br>
 * @author  Rick Jackson
 *
 * 
 */
public class EdgemomPanel extends javax.swing.JPanel {
  
  // NOTE : here define all variables general.  "Vector v" is used for main Comboboz
  static ArrayList<Edgemomsetup> v;             // Vector containing objects of this Edgemomsetup Type
  DBObject obj;
  ErrorTrack err=new ErrorTrack();
  boolean initiating=false;
  TagPanel tag=null;
  int role;

//  TagPanel tag2=null;
  
  //USER: Here are the local variables
  int intpriority;
  PopupForm popup = new PopupForm(this);
  PopupForm config = new PopupForm(this);
  
  // This routine must validate all fields on the form.  The err (ErrorTrack) variable
  // is used by the FUtil to verify fields.  Use FUTil or custom code here for verifications
  //
  // This chkForm calls the chkForm for each tagPanel in sub - no value checking is
  // necessary the the main form
  //
  private boolean chkForm() {
    // Do not change
   err.reset();
   UC.Look(error);
   
   //USER:  Your error checking code goes here setting the local variables to valid settings
   // note : Use FUtil.chk* to check dates, timestamps, IP addresses, etc and put them in
   // canonical form.  store in a class variable.  For instance :
   //   sdate = FUtil.chkDate(dateTextField, err);
   // Any errors found should err.set(true);  and err.append("error message");
   Object[] t = sub.getComponents();
   int i = 0;
   while (t.length>i) {
     TagPanel x;
     x = (TagPanel) t[i];
     x.chkForm(err);
     i++;
   }
   
   Util.prt("chkForm Edgemomsetup");


    // No CHANGES : If we found an error, color up error box
    if(err.isSet()) {
      error.setText(err.getText());
      error.setBackground(UC.red);
    }
    return err.isSet();
  }
  
  // This routine must set the form to initial state.  It does not update the JCombobox
  private void clearScreen() {
    
    // Do not change
    roleID.setSelectedIndex(-1);
    sub.removeAll();
    this.validate();
    Rectangle i = sub.getBounds();
    sub.repaint(i);
    UC.Look(sub);
    UC.Look(error);
    error.setText("");
    post.setEnabled(false);
//    post.setText("Enter a Edgemomsetup");
    
    //USER: Clear all fields for this form, this sets "defaults" for new screen
    // description.setText("");
  }
 
  
  private Edgemomsetup newOne() {
      
    return new Edgemomsetup(0, "0", "", //, more
            0, "",0, 0, "", "", "", "", 0
            );
  }
  
  private void oldOne(String p) throws SQLException {
    obj = new DBObject(DBConnectionThread.getThread(DBConnectionThread.getDBSchema()), DBConnectionThread.getDBSchema(), "edgemomsetup","tag",p);

    if(obj.isNew()) {
      Util.prt("object is new"+p);
    }
    else {
      //USER: Here set all of the form fields to data from the DBObject
      //      edgemomsetup.setText(obj.getString("Edgemomsetup"));
      // Example : description.setText(obj.getString("description"));
      roleID.setSelectedIndex(obj.getInt("roleID"));
      
      

        
        
    }           // End else isNew() - processing to form
  }
  public String getAccount() {return account.getText();}
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        gridBagLayout1 = new java.awt.GridBagLayout();
        scrollpane = new javax.swing.JScrollPane();
        sub = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        post = new javax.swing.JButton();
        error = new javax.swing.JTextField();
        lblRoleID = new javax.swing.JLabel();
        roleID = RolePanel.getJComboBox();
        check = new javax.swing.JButton();
        add = new javax.swing.JButton();
        ID = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        displayhelp = new javax.swing.JRadioButton();
        labAccount = new javax.swing.JLabel();
        account = new javax.swing.JTextField();
        genconfig = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(750, 386));
        setPreferredSize(new java.awt.Dimension(750, 386));
        setLayout(new java.awt.GridBagLayout());

        scrollpane.setBorder(null);
        scrollpane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollpane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        scrollpane.setAutoscrolls(true);
        scrollpane.setMinimumSize(new java.awt.Dimension(710, 500));
        scrollpane.setPreferredSize(new java.awt.Dimension(710, 500));

        sub.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sub.setMaximumSize(new java.awt.Dimension(32767, 700));
        sub.setMinimumSize(new java.awt.Dimension(690, 200));
        sub.setPreferredSize(new java.awt.Dimension(690, 200));
        scrollpane.setViewportView(sub);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(scrollpane, gridBagConstraints);

        jPanel1.setMinimumSize(new java.awt.Dimension(665, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(665, 100));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        post.setText("Post Changes");
        post.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(post, gridBagConstraints);

        error.setColumns(40);
        error.setEditable(false);
        error.setMinimumSize(new java.awt.Dimension(488, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(error, gridBagConstraints);

        lblRoleID.setText("RoleID : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(lblRoleID, gridBagConstraints);

        roleID.setMinimumSize(new java.awt.Dimension(150, 27));
        roleID.setPreferredSize(new java.awt.Dimension(150, 27));
        roleID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleIDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(roleID, gridBagConstraints);

        check.setText("Check");
        check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(check, gridBagConstraints);

        add.setText("Add New Tag");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(add, gridBagConstraints);

        ID.setMinimumSize(new java.awt.Dimension(123, 29));
        ID.setPreferredSize(new java.awt.Dimension(123, 29));
        ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(ID, gridBagConstraints);

        lblID.setText("ID : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(lblID, gridBagConstraints);

        displayhelp.setText("Display Help");
        displayhelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayhelpActionPerformed(evt);
            }
        });
        jPanel1.add(displayhelp, new java.awt.GridBagConstraints());

        labAccount.setText("Account:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(labAccount, gridBagConstraints);

        account.setColumns(10);
        account.setText("vdl");
        account.setMinimumSize(new java.awt.Dimension(134, 28));
        account.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                accountFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(account, gridBagConstraints);

        add(jPanel1, new java.awt.GridBagConstraints());

        genconfig.setText("Display Configuration File");
        genconfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genconfigActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        add(genconfig, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

  private void postActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postActionPerformed
    // Add your handling code here:
    
    // Do not change
    if(initiating) return;
   err.reset();
   UC.Look(error);
   
   //USER:  Your error checking code goes here setting the local variables to valid settings
   // note : Use FUtil.chk* to check dates, timestamps, IP addresses, etc and put them in
   // canonical form.  store in a class variable.  For instance :
   //   sdate = FUtil.chkDate(dateTextField, err);
   // Any errors found should err.set(true);  and err.append("error message");
   Object[] t = sub.getComponents();
   int i = 0;
   while (t.length>i) {
     TagPanel x;
     x = (TagPanel) t[i];
        x.addUpdate(err);
     i++;
   }
   // If we update something, we need to mark role as having changes so reconfiguration takes place
    Util.prt("edge.prop update role="+roleID.getSelectedItem()+" account="+account.getText());
    try {
      DBConnectionThread.getThread("edge").executeUpdate("UPDATE edge.role set hasdata=1 where ID="+((Role) roleID.getSelectedItem()).getID());
    }
    catch(SQLException e) {
      Util.prt("Could not set hasdata for role="+roleID.getSelectedItem()+" e="+e);
    }   clearScreen();
   Util.prt("postActionPerformed Edgemomsetup");


    // No CHANGES : If we found an error, color up error box
    if(err.isSet()) {
      error.setText(err.getText());
      error.setBackground(UC.red);
    }
        
}//GEN-LAST:event_postActionPerformed

  private void roleIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleIDActionPerformed
    // TODO add your handling code here:
    if(initiating) return;
    if(roleID.getSelectedIndex() == -1) return;
    if(roleID.getSelectedItem() == null) return;
    readPanel();

}//GEN-LAST:event_roleIDActionPerformed
private void readPanel() {
    sub.removeAll();
    sub.validate();
    sub.repaint();
    int i=0,height=30;
    Dimension ps;
//    int role = roleID.getSelectedID();
    Role r = (Role)roleID.getSelectedItem();
    int roletmp = r.getID();
    Edgemomsetup loc;
    try {
      Statement stmt = DBConnectionThread.getConnection("edge").createStatement();   // used for query
      String s = "SELECT * FROM edge.edgemomsetup WHERE roleID="+roletmp+" AND account='"+account.getText()+"' ORDER BY tag;";
      ResultSet rs = stmt.executeQuery(s);
      while (rs.next()) {
        loc = new Edgemomsetup(rs);
        tag = new TagPanel(this, sub, loc.getID(), 0, popup);
        height+=tag.getPreferredSize().getHeight()+4;
        UC.Look(tag);
        sub.add(tag);
        i++;
      }
      ps = sub.getPreferredSize();
      ps.height=height;
      sub.setPreferredSize(ps);
      sub.setMaximumSize(ps);
      sub.setMinimumSize(ps);
      Util.prta("Display subs");
      sub.validate();
    }
    catch (SQLException e) {
      Util.SQLErrorPrint(e,"makeEdgemomsetups() on table SQL failed");
    }
  }
  private void IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDActionPerformed
    // TODO add your handling code here:
    find();
}//GEN-LAST:event_IDActionPerformed

  private void checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkActionPerformed
    // TODO add your handling code here:
    if(chkForm()) return;
    post.setEnabled(true);
  }//GEN-LAST:event_checkActionPerformed

  private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
    // TODO add your handling code here:
    int i=0,height;
    Dimension ps;    
    tag = new TagPanel( this, sub, 0, roleID.getSelectedIndex(),popup);
    height= (int) tag.getPreferredSize().getHeight();
    UC.Look(tag);
    ps = sub.getSize();
    ps.height=((int) (height+sub.getPreferredSize().getHeight()));
    sub.add(tag);
    sub.setPreferredSize(ps); 
    sub.setMaximumSize(ps); 
    sub.setPreferredSize(ps);
    int n= sub.getComponents().length;
  }//GEN-LAST:event_addActionPerformed
  /** displayhelpActionPerformed toggles the PopupForm that display
   * help for the edgethreads
   * 
   *@param evt Event
   */
  private void displayhelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayhelpActionPerformed
    // TODO add your handling code here:
    if (displayhelp.isSelected()) popup.displayForm(true);
    else popup.displayForm(false);
  }//GEN-LAST:event_displayhelpActionPerformed
  /** genconfigActionPerformed calls the routine to generate a StringBuilder
   * that contains edgemomsetup configuration for the currently chosen Role.
   * It will then make the config PopupForm visible with generated contents
   * 
   *@param evt Event
   * also uses data from form to get required content. Data is taken from the
   * database - NOT the form so if you have not posted the data it won't
   * match config
   */
private void genconfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genconfigActionPerformed
  if (!config.isVisible() && roleID.getSelectedIndex() != -1) {
    Role r = (Role)roleID.getSelectedItem();
    int role2 = r.getID();    
    config.setContentHtml(false);
    ArrayList<Role> roles = new ArrayList<Role>(1);
    ArrayList<Edgemomsetup> threads = new ArrayList<Edgemomsetup>(20);
    roles.add((Role) roleID.getSelectedItem());
    StringBuilder t = EdgemomConfigFiles.GenEdgeStringBuilder(threads, roles, account.getText());
    config.setText(t.toString());
    config.displayForm(true);
    genconfig.setText("Hide Configuration File");
    config.setVisible(true);
  }
  else {
    config.setVisible(false);
    genconfig.setText("Display Configuration File");
  }
}//GEN-LAST:event_genconfigActionPerformed

private void accountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_accountFocusLost
    if(initiating) return;
    if(roleID.getSelectedIndex() == -1) return;
    if(roleID.getSelectedItem() == null) return;
    readPanel();

}//GEN-LAST:event_accountFocusLost
    /** dissmisspopup is called from PopupForm - it allows the PopupForm
     * to hide itself when the Dismiss button is pressed.
     * In this parent it:
     *  sets popup to invisible
     *  resets the displayhelp  on/off button to false
     *  sets config to invisible
     *  resets the text in genconfig to request Display
     *  
   *
   */
  public void dismisspopup() {
    popup.setVisible(false);
    displayhelp.setSelected(false);
    config.setVisible(false);
    genconfig.setText("Display Configuration File");
  }
    /** acceptpopup is called from TagPanel - when the Edgethread is
     *  changed in the JComboBox it updates the contents of the PopupForm
     *  if it is already displayed.
     *  
   *
   */
  public void acceptpopup() {
    displayhelp.setSelected(true);
    popup.displayForm(true);
  }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ID;
    private javax.swing.JTextField account;
    private javax.swing.JButton add;
    private javax.swing.JButton check;
    private javax.swing.JRadioButton displayhelp;
    private javax.swing.JTextField error;
    private javax.swing.JButton genconfig;
    private java.awt.GridBagLayout gridBagLayout1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labAccount;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblRoleID;
    private javax.swing.JButton post;
    private javax.swing.JComboBox roleID;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JPanel sub;
    // End of variables declaration//GEN-END:variables
  /** Creates new form EdgemomPanel. */
  public EdgemomPanel() {
    initiating=true;
    initComponents();
    roleID.setSelectedIndex(-1);    // Set selected type
    Look();                    // Set color background
    initiating=false;
   
    // USER:This is a good place for UC.Look(components) to get rid of the ugly Grey
    UC.Look(jPanel1);                    // Set color background
    UC.Look(scrollpane);                    // Set color background
    
    clearScreen();                    // Start with empty screen
    Util.addDefaultProperty("StartX","10");
    Util.addDefaultProperty("StartY","22");
    Util.addDefaultProperty("popupX","10");
    Util.addDefaultProperty("popupY","50");
    Util.addDefaultProperty("configX","10");
    Util.addDefaultProperty("configY","50");
//    Util.loadProperties("edgemom.prop");
//    shutdown = new EddgemomPanelShutdown();
//    Runtime.getRuntime().addShutdownHook(shutdown);
    setLocation((int) Double.parseDouble(Util.getProperty("StartX")), 
                (int) Double.parseDouble(Util.getProperty("StartY")));
    popup.setContentHtml(true);
    popup.setLocation((int) Double.parseDouble(Util.getProperty("popupX")), 
                      (int) Double.parseDouble(Util.getProperty("popupY")));    
    
    config.setLocation((int) Double.parseDouble(Util.getProperty("configX")), 
                       (int) Double.parseDouble(Util.getProperty("configY")));    
  }
   private void Look() {
    UC.Look(this);                    // Set color background
    
  }
  //////////////////////////////////////////////////////////////////////////////
  // No USER: changes needed below here!
  //////////////////////////////////////////////////////////////////////////////
  /** Create a JComboBox of all of the items in the table represented by this panel
   *@return A New JComboBox filled with all row keys from the table
   */
 public static JComboBox getJComboBox() { JComboBox b = new JComboBox(); getJComboBox(b); return b;}
  /** Update a JComboBox to represent the rows represented by this panel
   *@param b The JComboBox to Update
   */
  public static void getJComboBox(JComboBox b) {
    b.removeAllItems();
    makeEdgemomsetups();
    for (int i=0; i< v.size(); i++) {
      b.addItem( v.get(i));
    }
    b.setMaximumRowCount(30);
  }
  
  /** Given a JComboBox from getJComboBox, set selected item to match database ID
   *@param b The JComboBox
   *@param ID the row ID from the database to select
   */
  public static void setJComboBoxToID(JComboBox b, int ID) {
    b.setSelectedIndex(-1);
    //Util.prt("EdgemomPanel.setJComboBoxToID id="+ID);
    for(int i=0; i<b.getItemCount(); i++) 
      if(((Edgemomsetup) b.getItemAt(i)).getID() == ID) {
          b.setSelectedIndex(i);
          //Util.prt("EdgemomPanel.setJComboBoxToID id="+ID+" found at "+i);
      }
  }
  
  public  void setPopupText(String text) {
    popup.setText(text);
  }
  
  public  void setPopupXY() {
    if (popup==null  & config==null) return;
    if (popup!=null) {
      if (popup.isVisible()) {
        Util.setProperty("popupX", ""+popup.getLocationOnScreen().getX());
        Util.setProperty("popupY", ""+popup.getLocationOnScreen().getY());
        Util.saveProperties();
      }
    }    
    if (config!=null) {
      if (config.isVisible()) {
        Util.setProperty("configX", ""+config.getLocationOnScreen().getX());
        Util.setProperty("configY", ""+config.getLocationOnScreen().getY());
        Util.saveProperties();
      }
    }
  }  
  
  /** Given a database ID find the index into a JComboBox consistent with this panel
   *@param ID The row ID from the database
   *@return The index in the JComboBox with this ID
   */
  public static int getJComboBoxIndex(int ID) {
    if(v == null) makeEdgemomsetups();
    for(int i=0; i<v.size(); i++) if( ID == ((Edgemomsetup) v.get(i)).getID()) return i;
    return -1;
  }
  /** Cause the main JComboBox to be reloaded*/
  public static void reload() {
    v = null;
    makeEdgemomsetups();
  }
    /* return a vector with all of the Edgemomsetup
   * @return The vector with the edgemomsetup
   */
  public static ArrayList getEdgemomsetupVector() {
    if(v == null) makeEdgemomsetups();
    return v;
  }
  /** Get the item corresponding to database ID
   *@param ID the database Row ID
   *@return The Edgemomsetup row with this ID
   */
  public static Edgemomsetup getEdgemomsetupWithID(int ID) {
    if(v == null) makeEdgemomsetups();
    int i=getJComboBoxIndex(ID);
    if(i >= 0) return (Edgemomsetup) v.get(i);
    else return null;
  }
  
  // This routine should only need tweeking if key field is not same as table name
  private static void makeEdgemomsetups() {
    if (v != null) return;
    v=new ArrayList<Edgemomsetup>(100);
    try {
      try (Statement stmt = DBConnectionThread.getConnection("edge").createStatement() // used for query
      ) {
        String s = "SELECT * FROM edge.edgemomsetup ORDER BY tag;";
        try (ResultSet rs = stmt.executeQuery(s)) {
          while (rs.next()) {
            Edgemomsetup loc = new Edgemomsetup(rs);
//            Util.prt("MakeEdgemomsetup() i="+v.size()+" is "+loc.getEdgemomsetup());
            v.add(loc);
          }
        }
      }
    }
    catch (SQLException e) {
      Util.SQLErrorPrint(e,"makeEdgemomsetups() on table SQL failed");
    }    
  }
  
  // No changes needed
  private void find() {
    if(roleID == null) return;
    if(initiating) return;
    Edgemomsetup l;
    if(roleID.getSelectedIndex() == -1) {
      if(roleID.getSelectedItem() == null) return;
      l = newOne();
    } 
    else {
      l = (Edgemomsetup) roleID.getSelectedItem();
    }
      
    if(l == null) return;
    String p = l.getEdgemomsetup();
    if(p == null) return;
    if(p.equals("")) {
      post.setEnabled(false);
    }
    p = p.toUpperCase();
    error.setBackground(Color.lightGray);
    error.setText("");
    try {
      clearScreen();          // set screen to known state
      oldOne(p);
      
      // set add/Update button to indicate an update will happen
      if(obj.isNew()) {
          clearScreen();
          ID.setText("NEW!");

          // Set up for "NEW" - clear fields etc.
          error.setText("NOT found - assume NEW");
          error.setBackground(UC.yellow);
          post.setText("Add "+p);
          post.setEnabled(true);
      }
      else {
        post.setText("Update "+p);
        post.setEnabled(true);
        ID.setText(""+obj.getInt("ID"));    // Info only, show ID
      }
    }  
    // This is only thrown if something happens in oldone() new DBOject
    // Other than it being a new record.
    catch  (SQLException  E)                                 // 
    { Util.SQLErrorPrint(E,"Edgemomsetup: SQL error getting Edgemomsetup="+p);
    }
    
  }
  /** This main displays the form Pane by itself
   *@param args command line args ignored*/
  public static void main(String args[]) {
    Util.setProcess("EdgeConfig");
    Util.init(gov.usgs.edge.config.UC.getPropertyFilename());    
    Util.loadProperties(gov.usgs.edge.config.UC.getPropertyFilename());
    Util.addDefaultProperty("popupX","10");
    Util.addDefaultProperty("popupY","50");
    Util.addDefaultProperty("configX","10");
    Util.addDefaultProperty("configY","50");
    Util.addDefaultProperty("StartX","10");
    Util.addDefaultProperty("StartY","22");
    DBConnectionThread jcjbl;
    Util.init(UC.getPropertyFilename());
    UC.init();
    try {
        // Make test DBconnection for form
      jcjbl = new DBConnectionThread(DBConnectionThread.getDBServer(),DBConnectionThread.getDBCatalog(),
              UC.defaultUser(),UC.defaultPassword(), true, false, DBConnectionThread.getDBSchema(), DBConnectionThread.getDBVendor());
      if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
        if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          {Util.prt("Could not connect to DB "+jcjbl); System.exit(1);}
      Show.inFrame(new EdgemomPanel(), UC.XSIZE, UC.YSIZE);
    }
    catch(InstantiationException e) {}
  }    
}
