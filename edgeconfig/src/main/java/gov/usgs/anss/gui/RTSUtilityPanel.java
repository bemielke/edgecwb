/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */

package gov.usgs.anss.gui;
import gov.usgs.anss.guidb.TCPStation;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.util.ErrorTrack;
import gov.usgs.anss.util.RTSUtilityCommand;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.Util;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.StringTokenizer;

public final class RTSUtilityPanel extends javax.swing.JPanel {


  private final RTSUtilityCommand rtscmd;  /** Creates new form RTSUtilityPanel */
  private final UpdateText upd;           // This refreshes the text window
  public RTSUtilityPanel()
  {
    initComponents();
    Look();
    rtscmd = new RTSUtilityCommand(Util.getProperty("RTSServer"));
    Util.prta("Open connection to RTSServer on "+Util.getProperty("RTSServer"));
    upd = new UpdateText();

    // this is test code for doing backup IP from this screen.  Users should not see it
    //useBackupIP.setVisible(false);
    //useBackup.setVisible(false);
  }
  private void Look() {
    UC.Look(this);
    
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */

  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    labIP = new javax.swing.JLabel();
    ipadr = new javax.swing.JTextField();
    resetButton = new javax.swing.JButton();
    downloadButton = new javax.swing.JButton();
    error = new javax.swing.JTextField();
    oldBurnSocket = new javax.swing.JRadioButton();
    queryButton = new javax.swing.JButton();
    stationBox = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    query = new javax.swing.JTextArea();
    useBackup = new javax.swing.JRadioButton();
    useBackupIP = new javax.swing.JButton();

    labIP.setText("RTS IP address");
    add(labIP);

    ipadr.setColumns(15);
    ipadr.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        ipadrActionPerformed(evt);
      }
    });
    ipadr.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        ipadrFocusLost(evt);
      }
    });
    add(ipadr);

    resetButton.setText("Reset RTS");
    resetButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        resetButtonActionPerformed(evt);
      }
    });
    add(resetButton);

    downloadButton.setText("Download Burn-socket");
    downloadButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        downloadButtonActionPerformed(evt);
      }
    });
    add(downloadButton);

    error.setColumns(40);
    error.setEditable(false);
    add(error);

    oldBurnSocket.setText("V3.11");
    oldBurnSocket.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        oldBurnSocketActionPerformed(evt);
      }
    });
    add(oldBurnSocket);

    queryButton.setText("Query RTS");
    queryButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        queryButtonActionPerformed(evt);
      }
    });
    add(queryButton);

    stationBox.setBackground(new java.awt.Color(192, 192, 192));
    stationBox.setColumns(7);
    stationBox.setEditable(false);
    add(stationBox);

    jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 350));

    query.setBackground(new java.awt.Color(204, 204, 204));
    query.setColumns(80);
    query.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    query.setRows(50);
    query.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jScrollPane1.setViewportView(query);

    add(jScrollPane1);

    useBackup.setText("Use Backup IP ");
    useBackup.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        useBackupActionPerformed(evt);
      }
    });
    add(useBackup);

    useBackupIP.setText("Emergency Reset All station to NOT use Backup IP unless configured");
    useBackupIP.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        useBackupIPActionPerformed(evt);
      }
    });
    add(useBackupIP);
  }// </editor-fold>//GEN-END:initComponents

  private void ipadrActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ipadrActionPerformed
  {//GEN-HEADEREND:event_ipadrActionPerformed
    // Add your handling code here:
    if(rtscmd == null) return;
    ErrorTrack err= new ErrorTrack();
    //String stat=ipadr.getText();
    if(ipadr.getText().isEmpty()) return;
    if(ipadr.getText().charAt(0) < '0' || ipadr.getText().charAt(0) > '9') stationBox.setText(ipadr.getText());
    TCPStation.chkIP(ipadr, err);
    error.setText(err.getText());
  }//GEN-LAST:event_ipadrActionPerformed

  private void ipadrFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_ipadrFocusLost
  {//GEN-HEADEREND:event_ipadrFocusLost
    // Add your handling code here:
    if(rtscmd == null) return;
    ErrorTrack err= new ErrorTrack();
    //String stat=ipadr.getText();
    if(ipadr.getText().isEmpty()) return;
    if(ipadr.getText().charAt(0) < '0' || ipadr.getText().charAt(0) > '9') stationBox.setText(ipadr.getText());
    TCPStation.chkIP(ipadr, err);
    error.setText(err.getText());

  }//GEN-LAST:event_ipadrFocusLost

  private void queryButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_queryButtonActionPerformed
  {//GEN-HEADEREND:event_queryButtonActionPerformed
    // Add your handling code here:
    //if(okToRun()) qy = new RTSQuery();
    if(ipadr.getText().isEmpty()) return;
    rtscmd.rtsQuery(ipadr.getText());
    

  }//GEN-LAST:event_queryButtonActionPerformed

  private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_downloadButtonActionPerformed
  {//GEN-HEADEREND:event_downloadButtonActionPerformed
    // Add your handling code here:
    //if(okToRun()) dl = new DownloadBurnsocket();
    if(ipadr.getText().isEmpty()) return;
    if(ipadr.getText().indexOf(",") > 0) {
      String stations = ipadr.getText();
      StringTokenizer tk = new StringTokenizer(stations, ",");
      while(tk.hasMoreTokens()) {
        try {
          Statement stmt = DBConnectionThread.getConnection(DBConnectionThread.getDBSchema()).createStatement();   // used for query
          String s = "SELECT * FROM anss.tcpstation where tcpstation = "
                  + Util.sqlEscape(tk.nextToken());
          ResultSet rs = stmt.executeQuery(s);
          rs.next();
          TCPStation tcp = new TCPStation(rs);
          Util.prta("Try download"+tcp.getTCPStation()+" "+tcp.getIP());
          query.setText(query.getText()+"\nStart "+tcp.getTCPStation()+" "+tcp.getIP());
          rtscmd.rtsDownload(tcp.getIP(), oldBurnSocket.isSelected());
          //try {wait(120000);} catch(InterruptedException e) {}
        } catch(SQLException e) {
          query.setText("SQL exception doing * option");
        }
      }
    } else rtscmd.rtsDownload(ipadr.getText(), oldBurnSocket.isSelected());

  }//GEN-LAST:event_downloadButtonActionPerformed
  /*private void wait(int l) {
    long start = System.currentTimeMillis();
    while ( (System.currentTimeMillis() - start) < l) {}
  }*/
  private void resetButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetButtonActionPerformed
  {//GEN-HEADEREND:event_resetButtonActionPerformed
    // Add your handling code here:
    //if(okToRun()) rs = new RTSReset();
   if(ipadr.getText().isEmpty()) return;
   rtscmd.rtsReset(ipadr.getText());

  }//GEN-LAST:event_resetButtonActionPerformed

  private void oldBurnSocketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oldBurnSocketActionPerformed
  }//GEN-LAST:event_oldBurnSocketActionPerformed

  private void useBackupIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useBackupIPActionPerformed

    try {
      Statement stmt = DBConnectionThread.getConnection("anss").createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);   // used for query
      String s = "SELECT * FROM anss.tcpstation where commlinkid!=commlinkOverrideID and commlinkoverrideid!=4 order by tcpstation";
      ResultSet rs = stmt.executeQuery(s);
      while(rs.next()) {
        TCPStation tcp = new TCPStation(rs);
        Util.prta("Try useBackupIP "+tcp.getTCPStation()+" "+tcp.getIP()+" is "+
                useBackup.isSelected()+" normal="+rs.getInt("usebh")+
                " now "+(useBackup.isSelected() | rs.getInt("usebh") != 0));
        query.setText(query.getText()+"\nSet "+tcp.getTCPStation()+" "+tcp.getIP()+" "+(useBackup.isSelected() | rs.getInt("usebh") != 0));
        rs.updateInt("usebh", ((useBackup.isSelected()? (rs.getInt("usebh")|2): (rs.getInt("usebh") & 1))));
        rtscmd.setUseBackupIP(tcp.getIP(), useBackup.isSelected() | rs.getInt("usebh") != 0);
        rs.updateRow();
      }
    } catch(SQLException e) {
      query.setText("SQL exception find tcpstation for Use Backup IP");
    }

  }//GEN-LAST:event_useBackupIPActionPerformed

private void useBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useBackupActionPerformed
  if(useBackup.isSelected()) useBackupIP.setText("Emergency Set All Stations to Use Backup IP address");
  else useBackupIP.setText("Emergency Reset All Stations to Not use Backup IP unless configured");
}//GEN-LAST:event_useBackupActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton downloadButton;
  private javax.swing.JTextField error;
  private javax.swing.JTextField ipadr;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel labIP;
  private javax.swing.JRadioButton oldBurnSocket;
  private javax.swing.JTextArea query;
  private javax.swing.JButton queryButton;
  private javax.swing.JButton resetButton;
  private javax.swing.JTextField stationBox;
  private javax.swing.JRadioButton useBackup;
  private javax.swing.JButton useBackupIP;
  // End of variables declaration//GEN-END:variables

  public final class UpdateText extends Thread {
    public UpdateText() {
      start();
    }
    @Override
    public void run() {
      while(true) {
        try {
          sleep(500);
          if( !rtscmd.getText().toString().equals(query.getText())) {
            query.setText(rtscmd.getText().toString());
            query.setCaretPosition(query.getText().length());
          }
        }
        catch (InterruptedException e) {}
      }
    }
  }
  // This main displays the form Pane by itself
  public static void main(String args[]) {
 
      Show.inFrame(new RTSUtilityPanel(), UC.XSIZE, UC.YSIZE-110);


  }  
}
