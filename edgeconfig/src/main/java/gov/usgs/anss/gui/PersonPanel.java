/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */
package gov.usgs.anss.gui;

import gov.usgs.anss.guidb.Person;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.db.DBObject;
import gov.usgs.anss.util.*;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author  ketchum
 * requirements :
 * Person assumptions :
 * change the name of the form variable "Person" to the name of the class
 * Replace all "" with "", this is because the class name contains the Panel
 * and has been substited for where the data class is needed
 *
 * JComboBox variable name must be that of the table the data comes from
 *      The creation routine in form should be set to getJComboBox();
 * error - Must be a JTextField for posting error communications
 * updateAdd - Must be the JButton for user clicks to try to post the data
 * ID - JTextField which must be non-editable for posting Database IDs
 *
 */
public final class PersonPanel extends javax.swing.JPanel {
  //private static final boolean REQUIRE_SSL = true;

  // NOTE : here define all variables general.  "Vector v" is used for main Comboboz
  static ArrayList<Person> v;             // Vector containing objects of this Person Type
  private DBObject obj;

  private final ErrorTrack err=new ErrorTrack();

  // Here are the local variables
  private boolean isMaster;
  private boolean updatePassword;


  // This routine must validate all fields on the form.  The err (ErrorTrack) variable
  // is used by the FUtil to verify fields.  Use FUTil or custom code here for verifications
  private boolean chkForm() {
    // Do not change
    err.reset();
    UC.Look(error);

    // Your error checking code goes here setting the local variables to valid settings
    // like : delev = FUtil.chkDouble(elevation,err,-200.,4000.);
    //   Util.prt("chkFOrm Loction");


    // No CHANGES : If we found an error, color up error box
    if(err.isSet()) {
      error.setText(err.getText());
      error.setBackground(UC.red);
    }
    return err.isSet();
  }

  // This routine must set the form to initial state.  It does not update the JCombobox
  private void clearScreen() {

    // Do not change
    ID.setText("");
    UC.Look(error);

    error.setText("");
    addUpdate.setEnabled(false);
    addUpdate.setText("Enter a Person");

    // Clear all fields for this form, set background colors with UC.Look(Component)
    master.setText("");
    password.setText("");
    role.setText("");
    name.setText("");
    role.setVisible(isMaster);
    dataBases.setText("");
    password.setVisible(isMaster);
    master.setVisible(isMaster);
    labelRole.setVisible(isMaster);
    labelPassword.setVisible(isMaster);
    labelMaster.setVisible(isMaster);
    updatePassword=false;
  }

  private Person newOne() {
    return new Person(0, ((String) person.getSelectedItem()),
    "", "", "", "", "", "", ""
    );
  }

  private void oldOne(String p) throws SQLException {
    obj = new DBObject(DBConnectionThread.getThread(DBConnectionThread.getDBSchema()), 
    DBConnectionThread.getDBSchema(), "person","person",p);

    // Here set all of the form fields to data from the DBObject
    //      Person.setText(obj.getString("Person"));
    master.setText(obj.getString("master"));
    password.setText("");
    role.setText(obj.getString("role"));
    name.setText(obj.getString("name"));


  }


  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        gridBagLayout1 = new java.awt.GridBagLayout();
        templateLabel = new javax.swing.JLabel();
        person = getJComboBox();
        addUpdate = new javax.swing.JButton();
        ID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        error = new javax.swing.JTextField();
        labelMaster = new javax.swing.JLabel();
        labelPassword = new javax.swing.JLabel();
        labelRole = new javax.swing.JLabel();
        labName = new javax.swing.JLabel();
        master = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        role = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        rootPWLabel = new javax.swing.JLabel();
        rootPassword = new javax.swing.JPasswordField();
        labDataBases = new javax.swing.JLabel();
        dataBases = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        help = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        templateLabel.setText("UserID (initials) :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(templateLabel, gridBagConstraints);

        person.setEditable(true);
        person.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(person, gridBagConstraints);

        addUpdate.setText("Add/Update");
        addUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUpdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(addUpdate, gridBagConstraints);

        ID.setColumns(8);
        ID.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(ID, gridBagConstraints);

        jLabel9.setText("ID :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        add(jLabel9, gridBagConstraints);

        error.setColumns(40);
        error.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(error, gridBagConstraints);

        labelMaster.setText("Master :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(labelMaster, gridBagConstraints);

        labelPassword.setText("Password :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        add(labelPassword, gridBagConstraints);

        labelRole.setText("Role :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        add(labelRole, gridBagConstraints);

        labName.setText("Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        add(labName, gridBagConstraints);

        master.setColumns(4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(master, gridBagConstraints);

        password.setColumns(12);
        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(password, gridBagConstraints);

        role.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(role, gridBagConstraints);

        name.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(name, gridBagConstraints);

        rootPWLabel.setText("Root Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(rootPWLabel, gridBagConstraints);

        rootPassword.setColumns(12);
        rootPassword.setText("jPasswordField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(rootPassword, gridBagConstraints);

        labDataBases.setText("DataBases:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        add(labDataBases, gridBagConstraints);

        dataBases.setColumns(40);
        dataBases.setText("inv ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(dataBases, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(450, 99));

        help.setColumns(60);
        help.setRows(5);
        help.setText("You must put in the root password if you are creating a new user or \nif you are granting access to databases.  This is the root password for\nthe MySQL database and is generally only known to the Inventory \nsystem administrator.  ");
        jScrollPane1.setViewportView(help);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

  private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
    // Add your handling code here:
    updatePassword=true;
  }//GEN-LAST:event_passwordActionPerformed

  private void addUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUpdateActionPerformed
    // Add your handling code here:

    // Which databases to give new users access to.
    //final String[] ACCESS_DATABASES = {  "inv", "anss", "status", "edge" };

    // Do not change
    if(chkForm()) return;
    String p = person.getSelectedItem().toString();
    boolean wasNew = obj.isNew();
    DBConnectionThread dbroot;
    boolean useSSL=true ;
    try {
//    p = p.toUpperCase();

      // Set all of the fields
      if(!obj.isNew()) obj.refreshRecord();        // Refresh the result set so the sets will not fail on stale one
      obj.setString("Person",p);
      Util.prt("Person="+p);

      // Set all fields using obj.set?????("FieldName", value);
      if(isMaster) {
        //try {
        if ( !dataBases.getText().equals("")) {
          dbroot = DBConnectionThread.getThread("root");
          String [] databases = dataBases.getText().replaceAll(","," ").split("\\s");
          if(dbroot == null) {
            try {
              useSSL = (Util.getProperty("SSLOff")== null?true:!Util.getProperty("SSLOff").equalsIgnoreCase("true"));
              Util.prt("try root login to "+Util.getProperty("MySQLServer")+
                  " usessl="+Util.getProperty("SSLOff"));
              
              dbroot = new DBConnectionThread(Util.getProperty("DBServer"), 
                      DBConnectionThread.getDBSchema(), "root",new String(rootPassword.getPassword()), true,
                      useSSL,
                      "root",DBConnectionThread.getDBVendor(), Util.getOutput());
              if(!dbroot.waitForConnection())
                if(!dbroot.waitForConnection())
                  if(!dbroot.waitForConnection()) {
                    JOptionPane.showMessageDialog(null, "The root password did not log you in.\n"+
                        " Put in the root password and try again.",
                        "Person Transaction aborted. ",JOptionPane.ERROR_MESSAGE); 
                    return;
                  }
              
            }
            catch (InstantiationException e) {
              Util.prt("Instantiation exception! e="+e);
              e.printStackTrace();
              return;
            }
          }
          Util.prt("try GRANT privilege to "+p);
          try {
            Statement statement = dbroot.getConnection().createStatement();

            // This creates a user account to user@"%"" but with no privileges!
            try {
              statement.executeUpdate("CREATE USER "+Util.sqlEscape(p)+"@'%'"+
                " IDENTIFIED BY "+Util.sqlEscape(password.getText())+
                (useSSL ? " REQUIRE SSL":""));
              statement.executeUpdate("CREATE USER "+Util.sqlEscape(p)+"@'localhost'"+
                " IDENTIFIED BY "+Util.sqlEscape(password.getText())+
                (useSSL ? " REQUIRE SSL":""));
            }
            catch(SQLException e) {
              Util.prt("SQLException creating user.   Probably already exist! e="+e);
            }
            //statement.executeUpdate("GRANT USAGE on *.* to " + Util.sqlEscape(p)
            //        + " IDENTIFIED BY " + Util.sqlEscape(password.getText())
            //        + (SEEDDefaults.useSSL ? " REQUIRE SSL" : ""));
            // This creates a user account on localhost (which is apparently denied for @"%
            // localhosts should not require SSL (what is the point!)
            //statement.executeUpdate("GRANT USAGE on *.* to " + Util.sqlEscape(p)+"@'localhost'"
            //        + " IDENTIFIED BY " + Util.sqlEscape(password.getText()));
            // This loop grants basic privileges to a normal DB user (no ability to modify
            // dictionaries, create tables, etc.
            for (String database : databases) {
              Util.prt("GRANT DELETE, INSERT, SELECT, UPDATE on " + database.trim() + ".* TO " + Util.sqlEscape(p));
              statement.executeUpdate("GRANT DELETE, INSERT, SELECT, UPDATE on " + database.trim() + ".* TO " + Util.sqlEscape(p) + "@'%'");
              statement.executeUpdate("GRANT DELETE, INSERT, SELECT, UPDATE on " + database.trim() + ".* TO " + Util.sqlEscape(p) + "@'localhost'");
            }
            statement.executeUpdate("FLUSH PRIVILEGES");
            if( !password.getText().equals("")) {
              // The password in the inv.person table is no longer used, but set it
              // anyway.
              obj.setString("password",FUtil.encodePassword(password.getText()).substring(0, 16));
              // Set the MySQL password.
              String u = "UPDATE user set PASSWORD = PASSWORD("
                        + Util.sqlEscape(password.getText()) + ") WHERE user="+Util.sqlEscape(p);
              Util.prt("Setting password p="+p+" User.getUser="+User.getUser()+" u="+u);
              statement.executeUpdate(u);
              statement.close();
            }
          }
          catch  (SQLException  E)
          { Util.SQLErrorPrint(E,"Person: MySQL GRANTs failed user="+person.getSelectedItem());
            error.setText("Could Not create MySQL user! root password wrong?");
            error.setBackground(UC.red);
            return;
          }
        }
        obj.setString("master",master.getText());
        obj.setString("role",role.getText());
        if(updatePassword && !password.getText().equals("")) {
          // The password in the inv.person table is no longer used, but set it
          // anyway.
          obj.setString("password",FUtil.encodePassword(password.getText()));
          try ( // Set the MySQL password.
                  Statement statement = UC.getConnection().createStatement()) {
            String u;
            if (p.equals(User.getUser())) {
              u = "SET PASSWORD = PASSWORD("
                      + Util.sqlEscape(password.getText()) + ")";
            } else {
              u = "SET PASSWORD FOR " + Util.sqlEscape(p) + " = PASSWORD("
                      + Util.sqlEscape(password.getText()) + ")";
            }
            statement.executeUpdate(u);
          }
        }
        obj.setString("name",name.getText());
        Util.prt("For "+p+" Update/Add="+obj.isNew());
        obj.updateRecord();

      }
      else {
        JOptionPane.showMessageDialog(null, "You do not have Master privilege ",
            "You cannot add users.",JOptionPane.ERROR_MESSAGE);
        return;

      }
    }  catch  (SQLException  E)
    { Util.SQLErrorPrint(E,"Person: update failed user="+person.getSelectedItem());
      error.setText("Could Not Update File!");
      error.setBackground(UC.red);
      addUpdate.setEnabled(true);
    }



    v=null;
    getJComboBox(person);
    clearScreen();
    person.setSelectedIndex(-1);
  }//GEN-LAST:event_addUpdateActionPerformed

  private void personActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personActionPerformed
    // Add your handling code here:
  find();



  }//GEN-LAST:event_personActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ID;
    private javax.swing.JButton addUpdate;
    private javax.swing.JTextField dataBases;
    private javax.swing.JTextField error;
    private java.awt.GridBagLayout gridBagLayout1;
    private javax.swing.JTextArea help;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labDataBases;
    private javax.swing.JLabel labName;
    private javax.swing.JLabel labelMaster;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelRole;
    private javax.swing.JTextField master;
    private javax.swing.JTextField name;
    private javax.swing.JTextField password;
    private javax.swing.JComboBox person;
    private javax.swing.JTextField role;
    private javax.swing.JLabel rootPWLabel;
    private javax.swing.JPasswordField rootPassword;
    private javax.swing.JLabel templateLabel;
    // End of variables declaration//GEN-END:variables
  /** Creates new form PersonPanel */
  public PersonPanel() {
    initComponents();
    person.setSelectedIndex(-1);    // Set selected type
    Look();                    // Set color background
    isMaster=false;
    Util.prt("person pannel is masster="+User.getMaster());
    if(User.getMaster().equalsIgnoreCase("Y")) isMaster=true;
    clearScreen();                    // Start with empty screen
  }
  private void Look() {
    UC.Look(this);
  }
  // No changes needed.
  public static JComboBox getJComboBox() { JComboBox b=new JComboBox(); getJComboBox(b); return b;}
  public static void getJComboBox(JComboBox b) {
    b.removeAllItems();
    makePersons();
    for (int i=0; i< v.size(); i++) {
      //      Util.prt("Persons.jcombobox "+i+" = "+ ((Person) v.get(i)).getPerson());
      b.addItem( v.get(i));
    }
    b.setMaximumRowCount(30);
  }

  // Given a JComboBox from getJComboBox, set the selected option to the one with
  // Database ID = ID
  public static void setJComboBoxToID(JComboBox b, int ID) {
   b.setSelectedIndex(-1);
    for(int i=0; i<b.getItemCount(); i++)
      if(((Person) b.getItemAt(i)).getID() == ID) b.setSelectedIndex(i);
  }

  public ArrayList<Person> getVector() { return v;}


  // This routine should only need tweeking if key field is not same as table name
  private static void makePersons() {
    if (v != null) return;
    Util.prt("MAkepersons");
    v=new ArrayList<Person>(10);
    try {
      try (Statement stmt = UC.getConnection().createStatement() // used for query
      ) {
        String s = "SELECT * FROM "+DBConnectionThread.getDBSchema()+".person ORDER BY person";
        try (ResultSet rs = stmt.executeQuery(s)) {
          while (rs.next()) {
            Person loc = new Person(rs);
            //        Util.prt("MakePerson() i="+v.size()+" is "+loc.getPerson());
            v.add(loc);
          }
        }
      }

    }
    catch (SQLException e) {
      Util.SQLErrorPrint(e,"makePersons() on table SQL failed");
    }
  }

  // No changes needed
  private void find() {
    if(person == null) return;
    Person l;
    if(person.getSelectedIndex() == -1) {
      if(person.getSelectedItem() == null) return;
      l = newOne();

    }
    else {
      l = (Person) person.getSelectedItem();
    }

    if(l == null) return;
    String p = l.getPerson();
    if(p == null) return;
    if(p.equals("")) {
      addUpdate.setEnabled(false);
      addUpdate.setText("Enter a Person!");
    }
    p = p.toUpperCase();
    error.setBackground(Color.lightGray);
    error.setText("");
    try {
      clearScreen();          // set screen to known state
      oldOne(p);

      // set add/Update button to indicate an update will happen
      if(obj.isNew()) {
        addUpdate.setText("Add "+p);
      }
      else {
        addUpdate.setText("Update "+p);
      }
      addUpdate.setEnabled(true);
      ID.setText(""+obj.getInt("ID"));    // Info only, show ID
    }  catch  (SQLException  E)
    {  if( !E.getMessage().equals("Before start of result set"))
          Util.SQLErrorPrint(E,"Person: find failed Person="+p);
      clearScreen();
      ID.setText("NEW!");

      // Set up for "NEW" - clear fields etc.
      error.setText("NOT found - assume NEW");
      error.setBackground(UC.yellow);
      addUpdate.setText("Add "+p);
      addUpdate.setEnabled(true);
      //      Person.setSelectedItem(((Person) Person.getSelectedItem()).toString().toUpperCase());
    }

  }
  /** This main displays the form Pane by itself
   *@param args command line args ignored*/
  public static void main(String args[]) {
        DBConnectionThread jcjbl;
    Util.init(UC.getPropertyFilename());
    UC.init();
    try {
        // Make test DBconnection for form
      jcjbl = new DBConnectionThread(DBConnectionThread.getDBServer(),DBConnectionThread.getDBCatalog(),
              UC.defaultUser(),UC.defaultPassword(), true, false, DBConnectionThread.getDBSchema(), DBConnectionThread.getDBVendor());
      if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
        if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          {Util.prt("Could not connect to DB "+jcjbl); System.exit(1);}
      Show.inFrame(new PersonPanel(), UC.XSIZE, UC.YSIZE);
    }
    catch(InstantiationException e) {}
  }
  
}
