/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */

package gov.usgs.anss.gui;
//import java.sql.*;
import gov.usgs.anss.guidb.TCPStation;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.util.FUtil;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.TextStatusClient;
import gov.usgs.anss.util.Util;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.regex.Pattern;

/** This panel allows a user in the GUI to be on the console of an RTS type unit.
 *
 * @author davidketchum
 */
public final class UserSessionPanel extends javax.swing.JPanel {
  private UserSession session;
  public static final int MAX_CONSOLE_LEN=20000;
  private final byte [] b = new byte[80];
  private final StringBuilder sb = new StringBuilder(22000);
  private boolean sbChanged;
  private long lastSetText=System.currentTimeMillis();
  private final UpdateTimer timer;
    /** Creates new form UserSessionPanel */
    public UserSessionPanel() {
      initComponents();
      Util.prt("UserSessionPanel new!");
      rts.setSelectedIndex(-1);
      rts.addItem("_NONE");
      GetKeys keys = new GetKeys();
      console.addKeyListener(keys);
      this.addKeyListener(keys);
      UC.Look(this);
      rts.setFocusable(false);
      setFocusable(false);
      logMode.setSelected(false);
      labVers.setVisible(false);
      version.setVisible(false);
      timer = new UpdateTimer();
    }
    public void newChar(int chr) {
      b[0]=(byte) chr;
      sb.append(new String(b,0,1));
      sbChanged=true;
      setText(false);
      if(!logMode.isSelected() && sb.length() > MAX_CONSOLE_LEN) {
        sb.delete(0, sb.length() - MAX_CONSOLE_LEN +2000);
        setText(false);
      }
      try {
      console.setCaretPosition(Math.max(0,console.getText().length()-1));
      }
      catch(IllegalArgumentException e ) {
        Util.prt("Illegal Argument in newchar");
        console.setCaretPosition(Math.max(0,console.getText().length()-1));
      }
    }
    public void newCharNoUpdate(int chr) {
      sb.append((char) chr);
      sbChanged=true;
    }
    public void doText() {
      setText(true);
    }
    public void newString(String s) {
      sb.append(s);
      sbChanged=true;
      if(!logMode.isSelected() && sb.length() > MAX_CONSOLE_LEN) {
        sb.delete(0, sb.length() - MAX_CONSOLE_LEN +2000);
      }
      setText(false);
      try{
        console.setCaretPosition(Math.max(console.getText().length()-1,0));
      }
      catch(IllegalArgumentException e) {
        Util.prt("IllegalArgument");
        console.setCaretPosition(Math.max(0,console.getText().length()-1));
      }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    logMode = new javax.swing.JRadioButton();
    labVers = new javax.swing.JLabel();
    version = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    rts = RTSStationPanel.getJComboBox();
    labRE = new javax.swing.JLabel();
    regexp = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    console = new javax.swing.JTextArea();

    logMode.setText("Log File Mode");
    logMode.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        logModeActionPerformed(evt);
      }
    });
    add(logMode);

    labVers.setText("Version (blank=today, -n days ago) :");
    add(labVers);

    version.setColumns(2);
    add(version);

    jLabel1.setText("RTS:");
    add(jLabel1);

    rts.setEditable(true);
    rts.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rtsActionPerformed(evt);
      }
    });
    add(rts);

    labRE.setText("Match :");
    add(labRE);

    regexp.setColumns(8);
    regexp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        regexpActionPerformed(evt);
      }
    });
    regexp.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        regexpFocusLost(evt);
      }
    });
    add(regexp);

    jScrollPane1.setPreferredSize(new java.awt.Dimension(700, 550));

    console.setColumns(100);
    console.setEditable(false);
    console.setFont(new java.awt.Font("Monospaced", 0, 10));
    console.setRows(100);
    jScrollPane1.setViewportView(console);

    add(jScrollPane1);
  }// </editor-fold>//GEN-END:initComponents

    private void rtsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtsActionPerformed
      // TODO add your handling code here:
      if(rts.getSelectedIndex() == -1) {
        if(rts.getSelectedItem() == null) return;
        FUtil.searchJComboBox(rts, ((String) rts.getSelectedItem()).toUpperCase());
      }
      if(rts.getSelectedIndex() != -1) {
        if(session != null) session.close();
        session=null;
        if(rts.getSelectedItem() instanceof String) {
          if(rts.getSelectedItem().toString().equals("NONE")) {
            if(session != null) session.close();
            session=null;
          }

        } else if(rts.getSelectedItem() instanceof TCPStation) {
          if(logMode.isSelected()) {
           session = new UserSession(Util.getProperty("RTSServer"), 2009,
                   ((TCPStation) rts.getSelectedItem()).getTCPStation()+" fetch "+version.getText(),true, this);
            session=null;
          }
          else
            session = new UserSession(Util.getProperty("RTSServer"), 2009,
                    ((TCPStation) rts.getSelectedItem()).getTCPStation(),false,this);
        }
      }
      else {
        if(session != null) session.close();
        session=null;
      }
      console.requestFocus();
    }//GEN-LAST:event_rtsActionPerformed

    private void regexpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexpActionPerformed
      // TODO add your handling code here:
      setText(true);
    }//GEN-LAST:event_regexpActionPerformed

    private void regexpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_regexpFocusLost
      // TODO add your handling code here:
      setText(true);
    }//GEN-LAST:event_regexpFocusLost

    private void logModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logModeActionPerformed
      // TODO add your handling code here:
      if(logMode.isSelected()) {
        labVers.setVisible(true);
        version.setVisible(true);
      }
      else {
        labVers.setVisible(false);
        version.setVisible(false);
      }
    }//GEN-LAST:event_logModeActionPerformed

    private void setText(boolean doit) {
      String glob = regexp.getText();
      //Util.prt("doit="+doit+" chg="+sbChanged+" int="+(System.currentTimeMillis()-lastSetText));
      if(!doit) {
        if(System.currentTimeMillis() - lastSetText < 200) return;
        if(!sbChanged && console.getCaretPosition() == console.getText().length()-1) return;
      }
      lastSetText=System.currentTimeMillis();
      sbChanged=false;
      // If there is no pattern to match, just return the whole buffer
      if(glob.equals("")) {
        console.setText(sb.toString());
        if(console.getText().length() > 0) console.setCaretPosition(Math.max(0,console.getText().length()-1));
        return;
      }

      // Something is in regexp field, process the sb into the matching lines
      String re = null;
      StringBuilder sb2 = new StringBuilder(20000);
      Pattern p = null;
      // If there is someting in the RE to make it an RE then use the re
      if(glob.contains("*") || glob.contains("?") || glob.contains("[") || glob.contains("^")) {
        re = TextStatusClient.globToRegex(glob);
        p = Pattern.compile(re);
      }
      BufferedReader in = new BufferedReader(new StringReader(sb.toString()));
      String line;
      try {
        while( ( line = in.readLine()) != null) {
          if(re == null) {
            if(line.contains(glob)) sb2.append(line).append("\n");
          }
          else {
            if(p.matcher(line).matches()) sb2.append(line).append("\n");
          }
        }
        console.setText(sb2.toString());
        //if(console.getText().length() > 2000) console.setCaretPosition(console.getText().length() -2000);
        if(console.getText().length() > 0) console.setCaretPosition(Math.max(0,console.getText().length()-1));
      }
      catch(IOException e) {}
    }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextArea console;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JLabel labRE;
  private javax.swing.JLabel labVers;
  private javax.swing.JRadioButton logMode;
  private javax.swing.JTextField regexp;
  private javax.swing.JComboBox rts;
  private javax.swing.JTextField version;
  // End of variables declaration//GEN-END:variables

  public final class UpdateTimer extends Thread {
    public UpdateTimer() {
      start();
    }
    @Override
    public void run () {
      for(;;) {
        try {sleep(200);} catch(InterruptedException e) {}
        setText(false);
      }
    }
  }
  public final class GetKeys implements KeyListener {
    @Override
    public void keyPressed(KeyEvent event) {
      //System.out.println("press"+event.toString());
    }
    @Override
    public void keyReleased(KeyEvent event) {
      int key = event.getKeyCode();
      //System.out.print("released="+key+" code="+event);

    }
    @Override
    public void keyTyped(KeyEvent event) {
      byte b = (byte) event.getKeyChar();
      try {
        //Util.prta("sess="+session+" char="+b);
        if(session != null) session.sendChar(b);
      }
      catch(IOException e) {newString("Got IOException sending character="+b+" err="+e.toString());}
    }
  }
  /** This main displays the form Pane by itself
   *@param args command line args ignored*/
  public static void main(String args[]) {
    DBConnectionThread jcjbl;
    Util.init(UC.getPropertyFilename());
    UC.init();
    try {
        // Make test DBconnection for form
      jcjbl = new DBConnectionThread(DBConnectionThread.getDBServer(),DBConnectionThread.getDBCatalog(),
              UC.defaultUser(),UC.defaultPassword(), true, false, DBConnectionThread.getDBSchema(), DBConnectionThread.getDBVendor());
      if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
        if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          {Util.prt("Could not connect to DB "+jcjbl); System.exit(1);}
      Show.inFrame(new UserSessionPanel(), UC.XSIZE, UC.YSIZE);
    }
    catch(InstantiationException e) {}
  }    // This main displays the form Pane by itself
 
}
