/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */

/*
 * DisplayPopup.java
 *
 * Created on February 20, 2008, 9:29 AM
 */
package gov.usgs.anss.gui;


import gov.usgs.anss.util.Util;
import gov.usgs.anss.util.TextStatusClient;
import java.net.Socket;
import java.io.*;
import javax.swing.JOptionPane;

/**
 *
 * @author  davidketchum
 */
public class DisplayPopup extends javax.swing.JFrame {
  static Socket s;
  private ShutdownDisplayPopup shutdown;
  // Variables declaration - do not modify
  private javax.swing.JButton dismiss;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextArea text;
  private DisplayReader reader;
  private TextStatusClient client;
  // End of variables declaration
  /** Creates new form DisplayPopup
   * @param ss The socket to read to fill out this display
   */
  public DisplayPopup() {
    initComponents();
    setVisible(false);
    shutdown = new ShutdownDisplayPopup(this);
    reader = new DisplayReader(s);
    this.setDefaultCloseOperation(javax.swing.JFrame.HIDE_ON_CLOSE);
    Runtime.getRuntime().addShutdownHook(shutdown);
  }
  public void setClient(TextStatusClient c) { client=c;}
  public void setText(String s) {
    text.setText(s);
    setVisible(true);
    text.setCaretPosition(0);
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
  private void initComponents() {
    jScrollPane1 = new javax.swing.JScrollPane();
    text = new javax.swing.JTextArea();
    dismiss = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    jScrollPane1.setMinimumSize(new java.awt.Dimension(800, 1200));
    text.setColumns(80);
    text.setEditable(false);
    text.setFont(new java.awt.Font("Monospaced", 0, 12));
    text.setRows(80);
    jScrollPane1.setViewportView(text);

    dismiss.setText("Dismiss");
    dismiss.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        dismissActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
        .addContainerGap(364, Short.MAX_VALUE)
        .add(dismiss)
        .add(276, 276, 276))
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 679, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 677, Short.MAX_VALUE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(dismiss))
    );
    pack();
  }// </editor-fold>

  private void dismissActionPerformed(java.awt.event.ActionEvent evt) {
    //removeAll();
    setVisible(false);
  }

  /**
   * @param args the command line arguments
   */
  private static DisplayPopup popup;
  class ShutdownDisplayPopup extends Thread {
    DisplayPopup popup;
    public ShutdownDisplayPopup(DisplayPopup pop)  {
      popup = pop;
    }
    @Override
    public void run() {
      //Util.prta("Closing Popup form");
      //popup.dispose();
    }
  }
    class DisplayReader extends Thread {
    Socket s;
    byte [] b = new byte[1000];
    StringBuilder sb = new StringBuilder(10000);
    public DisplayReader(Socket ss) {
      s=ss;
      start();
    }
    @Override
    public void run() {
      int len = 0;
      for(;;) {
      try {
        try{sleep(200);} catch(InterruptedException e) {}
        if(client != null) {
          if(client.length() != len) {
            len =client.length();
            text.setText(client.getText());
            text.setCaretPosition(len-1);
            //Util.prta("Update len="+len);
          }
        }
        /*for(;;) {
          int i= s.getInputStream().read(b, 0, 1000);
          if(i <=0) break;
          String s2 = new String(b, 0, i);
          sb.append(s2);
          text.setText(sb.toString());
        }
        s.close();
        Util.prt("Displayreader done.");
        sb.append("Display reader done.");
        text.setText(sb.toString());
        text.setCaretPosition(sb.length()-1);
        if(sb.indexOf("***") >= 0) {
          BufferedReader in = new BufferedReader(new StringReader(sb.toString()));
          String line="";
          String msg="";
          int nline=0;
          while ((line = in.readLine()) != null) {
            nline++;
            if(line.indexOf("**") >=0) msg +=nline+":"+line+"\n";
          }
          sb.append(msg);
          text.setText(sb.toString());
          text.setCaretPosition(sb.length()-1);

          JOptionPane.showMessageDialog(Anss.aFrame, "There appear to be one or more problems in creating this volume:\n"+msg);
        }
        */
      }
      catch(Exception e) {
        Util.prt("Error readin from socket");
      }
      }
    }
  }

}
