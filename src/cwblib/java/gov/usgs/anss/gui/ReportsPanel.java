/*
 * This software is in the public domain because it contains materials 
 * that originally came from the United States Geological Survey, 
 * an agency of the United States Department of Interior. For more 
 * information, see the official USGS copyright policy at 
 * http://www.usgs.gov/visual-id/credit_usgs.html#copyright
 */


package gov.usgs.anss.gui;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.db.DBObject;
import gov.usgs.anss.db.Query;
import gov.usgs.anss.util.ErrorTrack;
import gov.usgs.anss.util.ErrorTrack;
import gov.usgs.anss.util.KMLReport;
import gov.usgs.anss.util.KMLReport;
import gov.usgs.anss.util.Report;
import gov.usgs.anss.util.Report;
import gov.usgs.anss.util.SQLReportParser;
import gov.usgs.anss.util.SQLReportParser;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.Show;
import gov.usgs.anss.util.UC;
import gov.usgs.anss.util.UC;
import gov.usgs.anss.util.Util;
import gov.usgs.anss.util.Util;
import java.awt.Color;
import java.awt.Point;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 * This class is the GUI for a user to run a report.  It contains JComboBox for
 *selecting a report and buttons to modify, print, or save to file.  The
 *ReloadReports button causes the reports JComboBox to be update with new 
 *information (needed to insure new work in Reports Panel is reported here).
 *
 * @author  ketchum
 * requirements :
 * report assumptions :
 * change the name of the form variable "report" to the name of the class
 * Replace all "Panel$" with "", this is because the class name contains the Panel
 * and has been substituted for where the data class is needed
 *
 * JComboBox variable name must be that of the table the data comes from
 *      The creation routine in form should be set to getJComboBox();
 * error - Must be a JTextField for posting error communications
 * updateAdd - Must be the JButton for user clicks to try to post the data
 * ID - JTextField which must be non-editable for posting Database IDs
 *
 */

public class ReportsPanel extends javax.swing.JPanel {
  
  // NOTE : here define all variables general.  "Vector v" is used for main Comboboz
  static ArrayList<Report> v;             // Vector containing objects of this Report Type
  DBObject obj;
  
  ErrorTrack err=new ErrorTrack();
  
  // Here are the local variables.  These are the variables set by chkForm to insure
  // that the text fields parse correctly to numeric and date types.  Text data in the
  // DB will not necessary need a local variable.
  String sql;
  String catalog;
  SQLReportParser sqlobj;
  static String threadName;
  
  // This routine must set the form to initial state.  It does not update the JCombobox
  private void clearScreen() {
    
    // Do not change
    UC.Look(error);
    UC.Look(userEntry);
    
    error.setText("");
    report.setSelectedIndex(-1);
    executeQuery.setEnabled(false);
  }
  
  
  private Report newOne() {
    return new Report(0, ((String) report.getSelectedItem()),""
    );
  }
  
  private void oldOne(String p) throws SQLException {
    obj = new DBObject(DBConnectionThread.getThread(DBConnectionThread.getDBSchema()), 
            DBConnectionThread.getDBSchema(), (threadName.equals("IADSR")?"irsanreport":"report"),"report",p);
    
    // Here set all of the form fields to data from the DBObject
    //      report.setText(obj.getString("report"));
    sql=obj.getString("sql");
    catalog=obj.getString("catalog");
    
  }
  
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    gridBagLayout1 = new java.awt.GridBagLayout();
    jComboBox1 = new javax.swing.JComboBox();
    templateLabel = new javax.swing.JLabel();
    report = ReportPanel.getJComboBox();
    tabDelimit = new javax.swing.JRadioButton();
    boxFormat = new javax.swing.JRadioButton();
    executeQuery = new javax.swing.JButton();
    userEntry = new javax.swing.JPanel();
    jSeparator1 = new javax.swing.JSeparator();
    error = new javax.swing.JTextField();
    scroll = new javax.swing.JScrollPane();
    //UC.PreferredSize(scroll, gov.usgs.anss.util.UC.XSIZE-50,gov.usgs.anss.util.UC.YSIZE-250);
    rpt = new javax.swing.JTextArea();
    fileButton = new javax.swing.JButton();
    reloadReports = new javax.swing.JButton();
    kml = new javax.swing.JButton();
    printButton = new javax.swing.JButton();

    templateLabel.setText("Rpt :");
    add(templateLabel);

    report.setEditable(true);
    report.setPreferredSize(new java.awt.Dimension(250, 28));
    report.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        reportActionPerformed(evt);
      }
    });
    add(report);

    tabDelimit.setText("Tab Delimit");
    add(tabDelimit);

    boxFormat.setText("Box Format");
    add(boxFormat);

    executeQuery.setText("Execute Query");
    executeQuery.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        executeQueryActionPerformed(evt);
      }
    });
    add(executeQuery);

    userEntry.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    userEntry.setMinimumSize(new java.awt.Dimension(900, 20));
    userEntry.setPreferredSize(new java.awt.Dimension(750, 20));
    userEntry.setLayout(new java.awt.GridLayout(4, 4));
    add(userEntry);

    jSeparator1.setPreferredSize(new java.awt.Dimension(600, 1));
    add(jSeparator1);

    error.setColumns(60);
    error.setEditable(false);
    add(error);

    scroll.setPreferredSize(new java.awt.Dimension(670, 230));

    rpt.setColumns(132);
    rpt.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
    rpt.setRows(500);
    rpt.setTabSize(2);
    scroll.setViewportView(rpt);

    add(scroll);

    fileButton.setText("To File ");
    fileButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fileButtonActionPerformed(evt);
      }
    });
    add(fileButton);

    reloadReports.setText("Reload Reports");
    reloadReports.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        reloadReportsActionPerformed(evt);
      }
    });
    add(reloadReports);

    kml.setText("KML");
    kml.setToolTipText("<HTML>\n<PRE>\nGenerate a KML file from this report.  The report MUST be pipe delimited.\nThe report must include colums of either \"station\" or \"channel\" and columns for \"latitude\" and \"longitude\".  Capitalization does not matter.\n</PRE>\n</HTML>");
    kml.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        kmlActionPerformed(evt);
      }
    });
    add(kml);

    printButton.setText("Print");
    printButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        printButtonActionPerformed(evt);
      }
    });
    add(printButton);
  }// </editor-fold>//GEN-END:initComponents
  public void setPreferredSize(int x, int y) {
    scroll.setPreferredSize(new java.awt.Dimension(x,y));
  }
  private void fileButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fileButtonActionPerformed
  {//GEN-HEADEREND:event_fileButtonActionPerformed
    // Add your handling code here:
    Util.prt("print query pos="+scroll.getViewport().getViewPosition()+
        " rect="+scroll.getViewport().getViewRect());
      scroll.getViewport().setViewPosition(new Point(0, 0));
    // Put the text into a file using lptBox or lpt().
    if(boxFormat.isSelected()) Util.lptBox(rpt.getText());
    else Util.lpt(rpt.getText());
  }//GEN-LAST:event_fileButtonActionPerformed

  private void reloadReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadReportsActionPerformed
    // Add your handling code here:
    ReportPanel.reload();
    int i = report.getSelectedIndex();
    ReportPanel.getJComboBox(report);
    report.setSelectedIndex(i);
  }//GEN-LAST:event_reloadReportsActionPerformed

  private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
    // Add your handling code here:
    // This puts the text into the lpt file
    fileButtonActionPerformed(evt);
    // Spool out that file
    Util.lptSpool();
  }//GEN-LAST:event_printButtonActionPerformed
  
  private void executeQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeQueryActionPerformed
    // Add your handling code here:
    
    // Do not change
    //find();
    doQuery();

  }//GEN-LAST:event_executeQueryActionPerformed
  
  private void reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportActionPerformed
    // Add your handling code here:
    find();
  }//GEN-LAST:event_reportActionPerformed

private void kmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kmlActionPerformed
  StringBuilder kmltext = KMLReport.formatKML(rpt.getText());
  JFileChooser fc = new JFileChooser();
  fc.addChoosableFileFilter(new KMLFilter());

  int ret = fc.showDialog(this, "KML File Chooser");
  String name=null;
  if(ret == JFileChooser.APPROVE_OPTION) {
    try {
      name = fc.getSelectedFile().getCanonicalPath();
      try (RandomAccessFile rd = new RandomAccessFile(name,"rw")) {
        rd.seek(0L);
        rd.write(kmltext.toString().getBytes());
        rd.setLength(kmltext.length());
      }

    }
    catch(IOException e) {
      Util.IOErrorPrint(e,"Tryting to write KML file="+name);
    }
  }

}//GEN-LAST:event_kmlActionPerformed
 public class KMLFilter extends FileFilter {
    @Override
    public boolean accept(File f) {
      if(f.isDirectory()) return true;
      return f.getName().contains(".kml");
    }
    @Override
    public String getDescription() {return "KML Filter";}
  }
  private void doQuery() {

    if(sql.indexOf("|") > 0) // Is this an method invocation?
    {
      // The form is Class|methodName(String name, String name2)
      StringTokenizer tk = new StringTokenizer(sql,"|(, )");
      String className=tk.nextToken();
      String methodName=tk.nextToken();
      String type=null;
      Util.prt("countTokens="+tk.countTokens()+" class="+className+" mehod="+methodName);
      String [] args = new String[tk.countTokens()/2];
      Class [] argClasses = new Class[tk.countTokens()/2];
      int i=0;
      try {
        while(tk.hasMoreTokens()) {
          type = tk.nextToken().trim();
          if(type.equalsIgnoreCase("String")) {
            args[i]=JOptionPane.showInputDialog("Enter "+tk.nextToken(),"");
            argClasses[i]=type.getClass();
            i++;
          }
          else if(type.equals("")) {
            Util.prt("Null argument i="+i);
          }
          else 
          { Util.prt("Unknown argument type "+type);
            return;
          }

        }

        Class cl = Class.forName(className);
        if(cl == null) {
          Util.prt("Class not found for "+className);
        }
        else
        {
          @SuppressWarnings("unchecked")
          Method mthd = cl.getMethod(methodName,argClasses);
          if(mthd == null) {
            Util.prt("No "+methodName+"() method for "+className);
            for(int j=0; j<args.length; j++) Util.prt(j+"th args is "+argClasses[j].toString());
          }
          else  // Invoke this method (must be static) with arguments
          { String s = (String) mthd.invoke(null, (Object [])args);
            rpt.setText(s);
            rpt.setCaretPosition(1);
          }

        }
      }
      catch(ClassNotFoundException e)
      { Util.prt("ClassNotFound for "+className+" or type="+type+"|"+e.toString());
      }
      catch(NoSuchMethodException e) 
      { Util.prt("NoSuchMethodException for "+className+"."+methodName);
        Util.prt("ArgClasses.length="+argClasses.length);
        for(int j=0; j<argClasses.length; j++) Util.prt(j+"throws arg class is "+argClasses[j].toString());
      }
      catch(InvocationTargetException e) 
      { Util.prt("InvocationTargetException for "+className+"."+methodName);
      }
      catch(IllegalAccessException e) 
      { Util.prt("Illegal Access exception creating instance of "+className);
        //return;
      }

    }
    else // No, its just SQL.
    { 
      Util.getOutput().setIgnoreSQLDialog(true);
      try 
      { if(DBConnectionThread.getThread(DBConnectionThread.getDBSchema()) == null ) {
          DBConnectionThread one = new DBConnectionThread("gacqdb.cr.usgs.gov","readonly", DBConnectionThread.getDBSchema(),
                   false,true, catalog, Util.getOutput());
        }

        Query q = new Query(DBConnectionThread.getThread(DBConnectionThread.getDBSchema()), sqlobj.getSql());
        if(tabDelimit.isSelected()) rpt.setText(q.getText("\t"));
        else rpt.setText(q.getText("|"));
        int ncols=rpt.getText().indexOf('\n');
        if(ncols < 80) ncols=80;
        rpt.setRows(q.getNRows()+2);
        rpt.setColumns(ncols+2);
        java.awt.Dimension d = rpt.getPreferredSize();
        d.setSize((int)ncols*rpt.getFont().getSize2D()*.7,(int)(q.getNRows()+5)*rpt.getFont().getSize2D());
        rpt.setPreferredSize(d);
        //Util.prt("size x="+ncols+" rows="+rpt.getRows());
        //Util.prt(" size="+rpt.getPreferredSize());
        
        
        //report.setSelectedIndex(-1);
        //Util.prt("validate in execute query pos="+scroll.getViewport().getViewPosition()+
        //  " rect="+scroll.getViewport().getViewRect());
        //validate();
        if(rpt.getText().length() > 1) rpt.setCaretPosition(1);
        //scroll.getViewport().setViewPosition(new Point(0, 0));
     
      }  catch  (SQLException  E)
      { Util.SQLErrorPrint(E,"report: update failed partno="+report.getSelectedItem());
        error.setText("Could Not Update File!");
        error.setBackground(UC.red);
        executeQuery.setEnabled(true);
      }

      catch(InstantiationException e) {
        e.printStackTrace();
        error.setText("report: Unknown error occurred.  Please report this");
        executeQuery.setEnabled(true);
      }
      catch(RuntimeException e) {
        e.printStackTrace();
        error.setText("report: Runtime error occurred.  Please report this");
        executeQuery.setEnabled(true);
      }
      Util.getOutput().setIgnoreSQLDialog(false);

    }
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JRadioButton boxFormat;
  private javax.swing.JTextField error;
  private javax.swing.JButton executeQuery;
  private javax.swing.JButton fileButton;
  private java.awt.GridBagLayout gridBagLayout1;
  private javax.swing.JComboBox jComboBox1;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JButton kml;
  private javax.swing.JButton printButton;
  private javax.swing.JButton reloadReports;
  private javax.swing.JComboBox report;
  private javax.swing.JTextArea rpt;
  private javax.swing.JScrollPane scroll;
  private javax.swing.JRadioButton tabDelimit;
  private javax.swing.JLabel templateLabel;
  private javax.swing.JPanel userEntry;
  // End of variables declaration//GEN-END:variables
  /** Creates new form ReportPanel 
   * @param catalog
  */
  public ReportsPanel(String catalog) {
    threadName=catalog;
    initComponents();
    report.setSelectedIndex(-1);    // Set selected type
    printButton.setText("Print using '"+Util.getProperty("PrinterCommand")+"'");
    fileButton.setText("Save in '"+Util.getProperty("PrinterFile")+"'");
    UC.Look((ReportsPanel) this);                    // Set color background
    clearScreen();                    // Start with empty screen
  }
  
  // No changes needed
  private void find() {
    if(report == null) return;
    Report l;
    if(report.getSelectedIndex() == -1) {
      if(report.getSelectedItem() == null) return;
      return;
    }
    else {
      l = (Report) report.getSelectedItem();
    }
    
    if(l == null) return;
    String p = l.getReport();
    if(p == null) return;
    error.setBackground(Color.lightGray);
    error.setText("");
    try {
      oldOne(p);
      
      // set add/Update button to indicate an update will happen  
      sqlobj=new SQLReportParser(sql,userEntry);
      executeQuery.setEnabled(true);
      validate();         // Cause SQLReportParser panel resize to occur
      doQuery();
    }  catch  (SQLException  E)
    { if( !E.getMessage().equals("Before start of result set"))
        Util.SQLErrorPrint(E,"report: find failed report="+p);
      clearScreen();
      
      // Set up for "NEW" - clear fields etc.
      error.setText("NOT found - How can this be");
      error.setBackground(UC.red);
      //      report.setSelectedItem(((Report) report.getSelectedItem()).toString().toUpperCase());
    }
    
  }


  /** This main displays the form Pane by itself
   *@param args command line args ignored*/
  public static void main(String args[]) {
    DBConnectionThread jcjbl;
    Util.init(UC.getPropertyFilename());
    UC.init();
    try {
        // Make test DBconnection for form
      jcjbl = new DBConnectionThread(DBConnectionThread.getDBServer(),DBConnectionThread.getDBCatalog(),
              UC.defaultUser(),UC.defaultPassword(), true, false, DBConnectionThread.getDBSchema(), DBConnectionThread.getDBVendor());
      if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
        if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
          if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
            if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
              if(!DBConnectionThread.waitForConnection(DBConnectionThread.getDBSchema()))
              {Util.prt("COuld not connect to DB "+jcjbl); 
                System.exit(1);
              }
      Show.inFrame(new ReportsPanel(DBConnectionThread.getDBSchema()), UC.XSIZE, UC.YSIZE);
    }
    catch(InstantiationException e) {}


  }
}
