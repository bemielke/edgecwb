/*
 * Copyright 2010, United States Geological Survey or
 * third-party contributors as indicated by the @author tags.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
/*
 * Login.java
 *
 * Created on March 10, 2000, 1:55 PM
 */

package gov.usgs.anss.metadatagui; 

import gov.usgs.anss.gui.ChangePasswordDialog;
import gov.usgs.anss.db.DBConnectionThread;
import gov.usgs.anss.db.JDBConnection;
import gov.usgs.anss.util.User;
import gov.usgs.anss.util.UserPropertiesPanel;
import gov.usgs.anss.util.Util;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;



/** 
 * @author  ketchum
 * @version 
 */
public class Login extends javax.swing.JPanel
{
  private static final String DEFAULT_USER = "dkt";
  private static final String DEFAULT_PASSWORD = "karen";
  /* Whether to offer to change a blank password after logging in. */
  private static final boolean CHANGE_BLANK_PASSWORDS = true;

  private MetaGUI app;      // Handle to applet
  private boolean exitNext;
  
  /** Creates new form Login */
  public Login(MetaGUI app) { 
    this.app=app;
    exitNext = false;
    //try {
      Connection C = UC.getConnection();
    /*}
    catch(SQLException e) {
      Util.prt("Could not open the ro access to server");
    }*/
    initComponents();
    UC.Look(this);
    startText();
    add(new UserPropertiesPanel());
    user.requestFocus();
  }

  private void startText() {
    text.setText(
      "USGS Inv login.  Please enter your username which is normally your\n"+
      "initials and your super secret password.  If you cannot get past this\n"+
      "screen either the server is down your password is not right. \n\n "+
      "To report problems call Dave Ketchum at (303) 520-5840 or \n"+
      "email ketchum@usgs.gov\n"+
      "\n\n\nVersion : "+Version.getVersion()+"\n"+Util.getProperty("DBServer"));    
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    lblUser = new javax.swing.JLabel();
    user = new javax.swing.JTextField();
    lblPassword = new javax.swing.JLabel();
    passwordEntered = new javax.swing.JPasswordField();
    errorText = new javax.swing.JTextField();
    jSeparator1 = new javax.swing.JSeparator();
    text = new javax.swing.JTextArea();

    setPreferredSize(new java.awt.Dimension(460, 480));

    lblUser.setText("Username:");
    add(lblUser);

    user.setColumns(15);
    user.setToolTipText("Enter a Your username (initials)");
    user.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        userActionPerformed(evt);
      }
    });
    user.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        userFocusLost(evt);
      }
    });
    add(user);

    lblPassword.setText("Password:");
    add(lblPassword);

    passwordEntered.setColumns(12);
    passwordEntered.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jPasswordField1ActionPerformed(evt);
      }
    });
    passwordEntered.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        passwordEnteredFocusLost(evt);
      }
    });
    add(passwordEntered);

    errorText.setColumns(50);
    errorText.setEditable(false);
    errorText.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
    errorText.setPreferredSize(new java.awt.Dimension(608, 40));
    errorText.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        errorTextFocusGained(evt);
      }
    });
    add(errorText);

    jSeparator1.setPreferredSize(new java.awt.Dimension(750, 10));
    add(jSeparator1);

    text.setColumns(50);
    text.setEditable(false);
    text.setRows(15);
    text.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    text.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusGained(java.awt.event.FocusEvent evt) {
        textFocusGained(evt);
      }
    });
    add(text);
  }// </editor-fold>//GEN-END:initComponents

  private void userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userActionPerformed
// Add your handling code here:
    if(exitNext) System.exit(0);
    user.transferFocus();
  }//GEN-LAST:event_userActionPerformed

  private void userFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userFocusLost
// Add your handling code here:
    if (exitNext)
      System.exit(0);

    if (evt.isTemporary())
      return;
    if (user.getText().equals(""))
      user.setText(DEFAULT_USER);
    new User(user.getText());
    String db = UC.JDBCCatalog();
    errorText.setText((UC.isTestDB() ? "Test " : "") + db + " database will be used");
    text.setText((UC.isTestDB() ? "Test " : "") + db
            + " database will be used\n" + text.getText()
            + "\n dbg=" + Util.isDebug() + " app=" + Util.getIsApplet());
  }//GEN-LAST:event_userFocusLost

  private void textFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFocusGained
// Add your handling code here:
    if(exitNext) System.exit(0);
    text.transferFocus();
  }//GEN-LAST:event_textFocusGained

  private void errorTextFocusGained (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_errorTextFocusGained
// Add your handling code here:
    if(exitNext) System.exit(0);
    errorText.transferFocus();
  }//GEN-LAST:event_errorTextFocusGained

  private void passwordEnteredFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordEnteredFocusLost
// Add your handling code here:
    if(evt.isTemporary())
      return;
  }//GEN-LAST:event_passwordEnteredFocusLost

  private void login() {
    Connection C;
    String username, passwd;
    User newuser;

    if (exitNext)
      System.exit(0);

    username = user.getText();
    passwd = new String(passwordEntered.getPassword());

    Util.prta("In login user="+username);
    if (username.equals("") && Util.isDebug()) {
      Util.prt("Setting Default");
      username = DEFAULT_USER;
      user.setText(username);
    } else {
      errorText.setText("You must enter a user name! Try again");
    }
    if (passwd.equals("") && username.equals(DEFAULT_USER))
      passwd = DEFAULT_PASSWORD;

    errorText.setText("Logging in user : '" + username + "' - Please Wait");
    Util.prta("create DBConnectionThread "+UC.JDBCHost()+"/"+UC.JDBCCatalog()+":"+username);
    while (true) {
      try {
        DBConnectionThread meta = DBConnectionThread.getThread("metadata");
        if(meta == null) {
          meta = 
                  new DBConnectionThread(Util.getProperty("MetaDBServer"),"metadata",
                    username, passwd, true, false, "metadata", 
                    DBConnectionThread.getDBVendor());

          if(!DBConnectionThread.waitForConnection("metadata"))
            if(!DBConnectionThread.waitForConnection("metadata"))
              if(!DBConnectionThread.waitForConnection("metadata")) {
                Util.prt("Did not get meatdata connection");
                javax.swing.JOptionPane.showMessageDialog(MetaGUI.aFrame,
                "Could not connect to Metadata database - check your username and password.  They are case sensitive!",
                             "Bad Login",
                             javax.swing.JOptionPane.INFORMATION_MESSAGE);
                System.exit(1);
              }
        }
        JDBConnection.setConnection(meta.getConnection());
        /*meta = DBConnectionThread.getThread("edge");
        if(meta == null) {
          DBConnectionThread dbConnectionThread = 
                  new DBConnectionThread(DBConnectionThread.getDBServer(),"edge",
                    username, passwd, true, false, "edge",
                    DBConnectionThread.getDBVendor());

          if(!DBConnectionThread.waitForConnection("edge"))
            if(!DBConnectionThread.waitForConnection("edge"))
              if(!DBConnectionThread.waitForConnection("edge")) {
                Util.prt("Did not get metadata connection");
                javax.swing.JOptionPane.showMessageDialog(MetaGUI.aFrame,
                "Could not connect to edge database - check your username and password.  They are case sensitive!",
                             "Bad Login",
                             javax.swing.JOptionPane.INFORMATION_MESSAGE);
                System.exit(1);
              }
        }*/
        newuser = new User("edge", DBConnectionThread.getConnection("metadata"), username);

      
        break;
      }
      catch(InstantiationException e) {
        Util.prt("Instantiation exception trying to open the databases e="+e);
        System.exit(1);
      }
    }

    /* Offer to set the user's password if it is blank. */
    if (passwd.equals("") && CHANGE_BLANK_PASSWORDS)
      new ChangePasswordDialog(MetaGUI.aFrame, DBConnectionThread.getConnection("metadata"),
              username, ChangePasswordDialog.SET_PASSWORD).setVisible(true);


    if (UC.isTestDB()) // On-screen debug.
      Util.debug(true);
    else
      Util.debug(false);
    Util.setApplet(false);

    Util.prt("User2 logged in : " + User.getUser()
      + " Master:" + User.getMaster());
    setVisible(false);
    errorText.setText("Welcome - Building menus...");
    repaint();

    String title = app.getTitle() + " - " + UC.JDBCHost();
    /* sslCheckBox being selected is no guarantee that the connection is
       actually using SSL. Unless the connection was made with the property
       "requireSSL=true", the connection may not be using SSL even if it was
       selected. I have not found a way to test the connection directly for SSL
       short of setting the system property "javax.net.debug=all" and parsing
       System.out. */

    app.setTitle(title);

    //UC.setFedCtr();       // If fed ctr override some data
    // Util.prt("Call build users="+C); 
    // if(!versionOK) System.exit(0);
    app.buildMenus(newuser, DBConnectionThread.getThread("metadata"));
  }

  /**
   * See if the version in the database is newer than that returned by
   * Version.getVersion().
   *
   * @param connection the connection over which to check the version
   * @return the date of the version in the database if it is newer, or null if
   * it is not
   */
  private static Date getNewVersion(Connection connection)
  {
    Statement statement;
    ResultSet rs;
    String dateString;
    Date currentVersion, newVersion;

    try {
      statement = connection.createStatement();
      try {
        rs = statement.executeQuery("SELECT * FROM metadata.version WHERE ID=1");
        if (rs.next()) {
          dateString = rs.getString("version");
          currentVersion = Version.VERSION_FORMAT.parse(Version.getVersion());
          newVersion = Version.VERSION_FORMAT.parse(dateString);
          if (newVersion.after(currentVersion))
            return newVersion;
        }
      } finally {
        statement.close();
      }
    } catch (SQLException e) {
    } catch (java.text.ParseException e) {
    }

    return null;
  }

  private void jPasswordField1ActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
// Add your handling code here:
    login();
  }//GEN-LAST:event_jPasswordField1ActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField errorText;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JLabel lblPassword;
  private javax.swing.JLabel lblUser;
  private javax.swing.JPasswordField passwordEntered;
  private javax.swing.JTextArea text;
  private javax.swing.JTextField user;
  // End of variables declaration//GEN-END:variables
  public static void main(String args[]) {
   //Show.inFrame(new Login(), 600, 480);
  }
}
